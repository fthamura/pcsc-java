<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* Copyright  (c) 2002 Graz University of Technology. All rights reserved.<a name="line.1"></a>
<FONT color="green">002</FONT>     *<a name="line.2"></a>
<FONT color="green">003</FONT>     * Redistribution and use in  source and binary forms, with or without <a name="line.3"></a>
<FONT color="green">004</FONT>     * modification, are permitted  provided that the following conditions are met:<a name="line.4"></a>
<FONT color="green">005</FONT>     *<a name="line.5"></a>
<FONT color="green">006</FONT>     * 1. Redistributions of  source code must retain the above copyright notice,<a name="line.6"></a>
<FONT color="green">007</FONT>     *    this list of conditions and the following disclaimer.<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * 2. Redistributions in  binary form must reproduce the above copyright notice,<a name="line.9"></a>
<FONT color="green">010</FONT>     *    this list of conditions and the following disclaimer in the documentation<a name="line.10"></a>
<FONT color="green">011</FONT>     *    and/or other materials provided with the distribution.<a name="line.11"></a>
<FONT color="green">012</FONT>     *  <a name="line.12"></a>
<FONT color="green">013</FONT>     * 3. The end-user documentation included with the redistribution, if any, must<a name="line.13"></a>
<FONT color="green">014</FONT>     *    include the following acknowledgment:<a name="line.14"></a>
<FONT color="green">015</FONT>     * <a name="line.15"></a>
<FONT color="green">016</FONT>     *    "This product includes software developed by IAIK of Graz University of<a name="line.16"></a>
<FONT color="green">017</FONT>     *     Technology."<a name="line.17"></a>
<FONT color="green">018</FONT>     * <a name="line.18"></a>
<FONT color="green">019</FONT>     *    Alternately, this acknowledgment may appear in the software itself, if <a name="line.19"></a>
<FONT color="green">020</FONT>     *    and wherever such third-party acknowledgments normally appear.<a name="line.20"></a>
<FONT color="green">021</FONT>     *  <a name="line.21"></a>
<FONT color="green">022</FONT>     * 4. The names "Graz University of Technology" and "IAIK of Graz University of<a name="line.22"></a>
<FONT color="green">023</FONT>     *    Technology" must not be used to endorse or promote products derived from <a name="line.23"></a>
<FONT color="green">024</FONT>     *    this software without prior written permission.<a name="line.24"></a>
<FONT color="green">025</FONT>     *  <a name="line.25"></a>
<FONT color="green">026</FONT>     * 5. Products derived from this software may not be called <a name="line.26"></a>
<FONT color="green">027</FONT>     *    "IAIK PKCS Wrapper", nor may "IAIK" appear in their name, without prior <a name="line.27"></a>
<FONT color="green">028</FONT>     *    written permission of Graz University of Technology.<a name="line.28"></a>
<FONT color="green">029</FONT>     *  <a name="line.29"></a>
<FONT color="green">030</FONT>     *  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED<a name="line.30"></a>
<FONT color="green">031</FONT>     *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED<a name="line.31"></a>
<FONT color="green">032</FONT>     *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR<a name="line.32"></a>
<FONT color="green">033</FONT>     *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE LICENSOR BE<a name="line.33"></a>
<FONT color="green">034</FONT>     *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,<a name="line.34"></a>
<FONT color="green">035</FONT>     *  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,<a name="line.35"></a>
<FONT color="green">036</FONT>     *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,<a name="line.36"></a>
<FONT color="green">037</FONT>     *  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON<a name="line.37"></a>
<FONT color="green">038</FONT>     *  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,<a name="line.38"></a>
<FONT color="green">039</FONT>     *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY<a name="line.39"></a>
<FONT color="green">040</FONT>     *  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE<a name="line.40"></a>
<FONT color="green">041</FONT>     *  POSSIBILITY  OF SUCH DAMAGE.<a name="line.41"></a>
<FONT color="green">042</FONT>     */<a name="line.42"></a>
<FONT color="green">043</FONT>    <a name="line.43"></a>
<FONT color="green">044</FONT>    package demo.pkcs.pkcs11;<a name="line.44"></a>
<FONT color="green">045</FONT>    <a name="line.45"></a>
<FONT color="green">046</FONT>    import java.io.BufferedReader;<a name="line.46"></a>
<FONT color="green">047</FONT>    import java.io.ByteArrayOutputStream;<a name="line.47"></a>
<FONT color="green">048</FONT>    import java.io.FileInputStream;<a name="line.48"></a>
<FONT color="green">049</FONT>    import java.io.FileOutputStream;<a name="line.49"></a>
<FONT color="green">050</FONT>    import java.io.InputStream;<a name="line.50"></a>
<FONT color="green">051</FONT>    import java.io.InputStreamReader;<a name="line.51"></a>
<FONT color="green">052</FONT>    import java.io.PrintWriter;<a name="line.52"></a>
<FONT color="green">053</FONT>    import java.util.Arrays;<a name="line.53"></a>
<FONT color="green">054</FONT>    import java.util.HashMap;<a name="line.54"></a>
<FONT color="green">055</FONT>    import java.util.Iterator;<a name="line.55"></a>
<FONT color="green">056</FONT>    import java.util.List;<a name="line.56"></a>
<FONT color="green">057</FONT>    import java.util.Map;<a name="line.57"></a>
<FONT color="green">058</FONT>    import java.util.Vector;<a name="line.58"></a>
<FONT color="green">059</FONT>    <a name="line.59"></a>
<FONT color="green">060</FONT>    import iaik.pkcs.pkcs11.Info;<a name="line.60"></a>
<FONT color="green">061</FONT>    import iaik.pkcs.pkcs11.Mechanism;<a name="line.61"></a>
<FONT color="green">062</FONT>    import iaik.pkcs.pkcs11.MechanismInfo;<a name="line.62"></a>
<FONT color="green">063</FONT>    import iaik.pkcs.pkcs11.Module;<a name="line.63"></a>
<FONT color="green">064</FONT>    import iaik.pkcs.pkcs11.Session;<a name="line.64"></a>
<FONT color="green">065</FONT>    import iaik.pkcs.pkcs11.Slot;<a name="line.65"></a>
<FONT color="green">066</FONT>    import iaik.pkcs.pkcs11.Token;<a name="line.66"></a>
<FONT color="green">067</FONT>    import iaik.pkcs.pkcs11.TokenInfo;<a name="line.67"></a>
<FONT color="green">068</FONT>    import iaik.pkcs.pkcs11.objects.DES3SecretKey;<a name="line.68"></a>
<FONT color="green">069</FONT>    import iaik.pkcs.pkcs11.objects.Object;<a name="line.69"></a>
<FONT color="green">070</FONT>    import iaik.pkcs.pkcs11.parameters.InitializationVectorParameters;<a name="line.70"></a>
<FONT color="green">071</FONT>    <a name="line.71"></a>
<FONT color="green">072</FONT>    <a name="line.72"></a>
<FONT color="green">073</FONT>    <a name="line.73"></a>
<FONT color="green">074</FONT>    /**<a name="line.74"></a>
<FONT color="green">075</FONT>     * This demo program uses a PKCS#11 module to encrypt a given file using<a name="line.75"></a>
<FONT color="green">076</FONT>     * Triple DES.<a name="line.76"></a>
<FONT color="green">077</FONT>     *<a name="line.77"></a>
<FONT color="green">078</FONT>     * @author &lt;a href="mailto:Karl.Scheibelhofer@iaik.at"> Karl Scheibelhofer &lt;/a><a name="line.78"></a>
<FONT color="green">079</FONT>     * @version 0.1<a name="line.79"></a>
<FONT color="green">080</FONT>     * @invariants<a name="line.80"></a>
<FONT color="green">081</FONT>     */<a name="line.81"></a>
<FONT color="green">082</FONT>    public class TripleDESEncrypt {<a name="line.82"></a>
<FONT color="green">083</FONT>    <a name="line.83"></a>
<FONT color="green">084</FONT>      static PrintWriter output_;<a name="line.84"></a>
<FONT color="green">085</FONT>    <a name="line.85"></a>
<FONT color="green">086</FONT>      static BufferedReader input_;<a name="line.86"></a>
<FONT color="green">087</FONT>    <a name="line.87"></a>
<FONT color="green">088</FONT>      static {<a name="line.88"></a>
<FONT color="green">089</FONT>        try {<a name="line.89"></a>
<FONT color="green">090</FONT>          //output_ = new PrintWriter(new FileWriter("GetInfo_output.txt"), true);<a name="line.90"></a>
<FONT color="green">091</FONT>          output_ = new PrintWriter(System.out, true);<a name="line.91"></a>
<FONT color="green">092</FONT>          input_ = new BufferedReader(new InputStreamReader(System.in));<a name="line.92"></a>
<FONT color="green">093</FONT>        } catch (Throwable thr) {<a name="line.93"></a>
<FONT color="green">094</FONT>          thr.printStackTrace();<a name="line.94"></a>
<FONT color="green">095</FONT>          output_ = new PrintWriter(System.out, true);<a name="line.95"></a>
<FONT color="green">096</FONT>          input_ = new BufferedReader(new InputStreamReader(System.in));<a name="line.96"></a>
<FONT color="green">097</FONT>        }<a name="line.97"></a>
<FONT color="green">098</FONT>      }<a name="line.98"></a>
<FONT color="green">099</FONT>    <a name="line.99"></a>
<FONT color="green">100</FONT>      public static void main(String[] args) {<a name="line.100"></a>
<FONT color="green">101</FONT>        if (args.length != 3) {<a name="line.101"></a>
<FONT color="green">102</FONT>          printUsage();<a name="line.102"></a>
<FONT color="green">103</FONT>          System.exit(1);<a name="line.103"></a>
<FONT color="green">104</FONT>        }<a name="line.104"></a>
<FONT color="green">105</FONT>    <a name="line.105"></a>
<FONT color="green">106</FONT>        try {<a name="line.106"></a>
<FONT color="green">107</FONT>            // Security.addProvider(new IAIK());<a name="line.107"></a>
<FONT color="green">108</FONT>    <a name="line.108"></a>
<FONT color="green">109</FONT>            output_.println("################################################################################");<a name="line.109"></a>
<FONT color="green">110</FONT>            output_.println("load and initialize module: " + args[0]);<a name="line.110"></a>
<FONT color="green">111</FONT>            Module pkcs11Module = Module.getInstance(args[0]);<a name="line.111"></a>
<FONT color="green">112</FONT>            pkcs11Module.initialize(null);<a name="line.112"></a>
<FONT color="green">113</FONT>    <a name="line.113"></a>
<FONT color="green">114</FONT>            Info info = pkcs11Module.getInfo();<a name="line.114"></a>
<FONT color="green">115</FONT>            output_.println(info);<a name="line.115"></a>
<FONT color="green">116</FONT>            output_.println("################################################################################");<a name="line.116"></a>
<FONT color="green">117</FONT>    <a name="line.117"></a>
<FONT color="green">118</FONT>    <a name="line.118"></a>
<FONT color="green">119</FONT>            output_.println("################################################################################");<a name="line.119"></a>
<FONT color="green">120</FONT>            output_.println("getting list of all tokens");<a name="line.120"></a>
<FONT color="green">121</FONT>            Slot[] slotsWithToken = pkcs11Module.getSlotList(Module.SlotRequirement.TOKEN_PRESENT);<a name="line.121"></a>
<FONT color="green">122</FONT>            Token[] tokens = new Token[slotsWithToken.length];<a name="line.122"></a>
<FONT color="green">123</FONT>            Map tokenIDtoToken = new HashMap(tokens.length);<a name="line.123"></a>
<FONT color="green">124</FONT>    <a name="line.124"></a>
<FONT color="green">125</FONT>            for (int i = 0; i &lt; slotsWithToken.length; i++) {<a name="line.125"></a>
<FONT color="green">126</FONT>              output_.println("________________________________________________________________________________");<a name="line.126"></a>
<FONT color="green">127</FONT>              tokens[i] = slotsWithToken[i].getToken();<a name="line.127"></a>
<FONT color="green">128</FONT>              TokenInfo tokenInfo = tokens[i].getTokenInfo();<a name="line.128"></a>
<FONT color="green">129</FONT>              long tokenID = tokens[i].getTokenID();<a name="line.129"></a>
<FONT color="green">130</FONT>              tokenIDtoToken.put(new Long(tokenID), tokens[i]);<a name="line.130"></a>
<FONT color="green">131</FONT>              output_.println("Token ID: " + tokenID);<a name="line.131"></a>
<FONT color="green">132</FONT>              output_.println(tokenInfo);<a name="line.132"></a>
<FONT color="green">133</FONT>              output_.println("________________________________________________________________________________");<a name="line.133"></a>
<FONT color="green">134</FONT>            }<a name="line.134"></a>
<FONT color="green">135</FONT>            output_.println("################################################################################");<a name="line.135"></a>
<FONT color="green">136</FONT>    <a name="line.136"></a>
<FONT color="green">137</FONT>            output_.println("################################################################################");<a name="line.137"></a>
<FONT color="green">138</FONT>            Token token = null;<a name="line.138"></a>
<FONT color="green">139</FONT>            Long selectedTokenID = null;<a name="line.139"></a>
<FONT color="green">140</FONT>            if (tokens.length == 0) {<a name="line.140"></a>
<FONT color="green">141</FONT>              output_.println("There is no slot with a present token.");<a name="line.141"></a>
<FONT color="green">142</FONT>              output_.flush();<a name="line.142"></a>
<FONT color="green">143</FONT>              System.exit(0);<a name="line.143"></a>
<FONT color="green">144</FONT>            } else if (tokens.length == 1) {<a name="line.144"></a>
<FONT color="green">145</FONT>              output_.println("Taking token with ID: " + tokens[0].getTokenID());<a name="line.145"></a>
<FONT color="green">146</FONT>              selectedTokenID = new Long(tokens[0].getTokenID());<a name="line.146"></a>
<FONT color="green">147</FONT>              token = tokens[0];<a name="line.147"></a>
<FONT color="green">148</FONT>            } else {<a name="line.148"></a>
<FONT color="green">149</FONT>              boolean gotTokenID = false;<a name="line.149"></a>
<FONT color="green">150</FONT>              while (!gotTokenID) {<a name="line.150"></a>
<FONT color="green">151</FONT>                output_.print("Enter the ID of the token to use or 'x' to exit: ");<a name="line.151"></a>
<FONT color="green">152</FONT>                output_.flush();<a name="line.152"></a>
<FONT color="green">153</FONT>                String tokenIDstring = input_.readLine();<a name="line.153"></a>
<FONT color="green">154</FONT>                if (tokenIDstring.equalsIgnoreCase("x")) {<a name="line.154"></a>
<FONT color="green">155</FONT>                  output_.flush();<a name="line.155"></a>
<FONT color="green">156</FONT>                  System.exit(0);<a name="line.156"></a>
<FONT color="green">157</FONT>                }<a name="line.157"></a>
<FONT color="green">158</FONT>                try {<a name="line.158"></a>
<FONT color="green">159</FONT>                  selectedTokenID = new Long(tokenIDstring);<a name="line.159"></a>
<FONT color="green">160</FONT>                  token = (Token) tokenIDtoToken.get(selectedTokenID);<a name="line.160"></a>
<FONT color="green">161</FONT>                  if (token != null) {<a name="line.161"></a>
<FONT color="green">162</FONT>                    gotTokenID = true;<a name="line.162"></a>
<FONT color="green">163</FONT>                  } else {<a name="line.163"></a>
<FONT color="green">164</FONT>                    output_.println("A token with the entered ID \"" + tokenIDstring + "\" does not exist. Try again.");<a name="line.164"></a>
<FONT color="green">165</FONT>                  }<a name="line.165"></a>
<FONT color="green">166</FONT>                } catch (NumberFormatException ex) {<a name="line.166"></a>
<FONT color="green">167</FONT>                  output_.println("The entered ID \"" + tokenIDstring + "\" is invalid. Try again.");<a name="line.167"></a>
<FONT color="green">168</FONT>                }<a name="line.168"></a>
<FONT color="green">169</FONT>              }<a name="line.169"></a>
<FONT color="green">170</FONT>            }<a name="line.170"></a>
<FONT color="green">171</FONT>    <a name="line.171"></a>
<FONT color="green">172</FONT>            Session session =<a name="line.172"></a>
<FONT color="green">173</FONT>                token.openSession(Token.SessionType.SERIAL_SESSION, Token.SessionReadWriteBehavior.RO_SESSION, null, null);<a name="line.173"></a>
<FONT color="green">174</FONT>    <a name="line.174"></a>
<FONT color="green">175</FONT>            TokenInfo tokenInfo = token.getTokenInfo();<a name="line.175"></a>
<FONT color="green">176</FONT>            if (tokenInfo.isLoginRequired()) {<a name="line.176"></a>
<FONT color="green">177</FONT>              if (tokenInfo.isProtectedAuthenticationPath()) {<a name="line.177"></a>
<FONT color="green">178</FONT>                output_.print("Please enter the user PIN at the PIN-pad of your reader.");<a name="line.178"></a>
<FONT color="green">179</FONT>                session.login(Session.UserType.USER, null); // the token prompts the PIN by other means; e.g. PIN-pad<a name="line.179"></a>
<FONT color="green">180</FONT>              } else {<a name="line.180"></a>
<FONT color="green">181</FONT>                output_.print("Enter user-PIN and press [return key]: ");<a name="line.181"></a>
<FONT color="green">182</FONT>                output_.flush();<a name="line.182"></a>
<FONT color="green">183</FONT>                String userPINString = input_.readLine();<a name="line.183"></a>
<FONT color="green">184</FONT>                session.login(Session.UserType.USER, userPINString.toCharArray());<a name="line.184"></a>
<FONT color="green">185</FONT>              }<a name="line.185"></a>
<FONT color="green">186</FONT>            }<a name="line.186"></a>
<FONT color="green">187</FONT>            output_.println("################################################################################");<a name="line.187"></a>
<FONT color="green">188</FONT>    <a name="line.188"></a>
<FONT color="green">189</FONT>            List supportedMechanisms = Arrays.asList(token.getMechanismList());<a name="line.189"></a>
<FONT color="green">190</FONT>            MechanismInfo des3CbcMechanismInfo = null;<a name="line.190"></a>
<FONT color="green">191</FONT>            if (!supportedMechanisms.contains(Mechanism.DES3_CBC_PAD)) {<a name="line.191"></a>
<FONT color="green">192</FONT>              output_.print("This token does not support Tripple DES!");<a name="line.192"></a>
<FONT color="green">193</FONT>              output_.flush();<a name="line.193"></a>
<FONT color="green">194</FONT>              System.exit(0);<a name="line.194"></a>
<FONT color="green">195</FONT>            } else {<a name="line.195"></a>
<FONT color="green">196</FONT>              des3CbcMechanismInfo = token.getMechanismInfo(Mechanism.DES3_CBC_PAD);<a name="line.196"></a>
<FONT color="green">197</FONT>              if (!des3CbcMechanismInfo.isEncrypt()) {<a name="line.197"></a>
<FONT color="green">198</FONT>                output_.print("This token does not support Tripple DES for encryption!");<a name="line.198"></a>
<FONT color="green">199</FONT>                output_.flush();<a name="line.199"></a>
<FONT color="green">200</FONT>                System.exit(0);<a name="line.200"></a>
<FONT color="green">201</FONT>              }<a name="line.201"></a>
<FONT color="green">202</FONT>            }<a name="line.202"></a>
<FONT color="green">203</FONT>    <a name="line.203"></a>
<FONT color="green">204</FONT>            output_.println("################################################################################");<a name="line.204"></a>
<FONT color="green">205</FONT>            output_.println("searching for Tripple DES encryption keys");<a name="line.205"></a>
<FONT color="green">206</FONT>    <a name="line.206"></a>
<FONT color="green">207</FONT>            List encryptionKeyList = new Vector(4);<a name="line.207"></a>
<FONT color="green">208</FONT>    <a name="line.208"></a>
<FONT color="green">209</FONT>            // first we search for secret keys that we can use for encryption<a name="line.209"></a>
<FONT color="green">210</FONT>            DES3SecretKey secretEncryptionKeyTemplate = new DES3SecretKey();<a name="line.210"></a>
<FONT color="green">211</FONT>            secretEncryptionKeyTemplate.getEncrypt().setBooleanValue(Boolean.TRUE);<a name="line.211"></a>
<FONT color="green">212</FONT>    <a name="line.212"></a>
<FONT color="green">213</FONT>            session.findObjectsInit(secretEncryptionKeyTemplate);<a name="line.213"></a>
<FONT color="green">214</FONT>            Object[] secretEncryptionKeys = session.findObjects(1);<a name="line.214"></a>
<FONT color="green">215</FONT>    <a name="line.215"></a>
<FONT color="green">216</FONT>            while (secretEncryptionKeys.length > 0) {<a name="line.216"></a>
<FONT color="green">217</FONT>              encryptionKeyList.add(secretEncryptionKeys[0]);<a name="line.217"></a>
<FONT color="green">218</FONT>              secretEncryptionKeys = session.findObjects(1);<a name="line.218"></a>
<FONT color="green">219</FONT>            }<a name="line.219"></a>
<FONT color="green">220</FONT>            session.findObjectsFinal();<a name="line.220"></a>
<FONT color="green">221</FONT>    <a name="line.221"></a>
<FONT color="green">222</FONT>            DES3SecretKey selectedEncryptionKey = null;<a name="line.222"></a>
<FONT color="green">223</FONT>            if (encryptionKeyList.size() == 0) {<a name="line.223"></a>
<FONT color="green">224</FONT>              if (supportedMechanisms.contains(Mechanism.DES3_KEY_GEN)) {<a name="line.224"></a>
<FONT color="green">225</FONT>                output_.println("Found NO Tripple DES key that can be used for encryption.");<a name="line.225"></a>
<FONT color="green">226</FONT>                output_.print("Do you want to generate a temporal session key? (y/n) ");<a name="line.226"></a>
<FONT color="green">227</FONT>                output_.flush();<a name="line.227"></a>
<FONT color="green">228</FONT>    <a name="line.228"></a>
<FONT color="green">229</FONT>                String mechanismNameString = input_.readLine();<a name="line.229"></a>
<FONT color="green">230</FONT>                if (mechanismNameString.equalsIgnoreCase("y")) {<a name="line.230"></a>
<FONT color="green">231</FONT>                  Mechanism keyGenerationMechanism = (Mechanism) Mechanism.DES3_KEY_GEN.clone();<a name="line.231"></a>
<FONT color="green">232</FONT>    <a name="line.232"></a>
<FONT color="green">233</FONT>                  DES3SecretKey secretKeyTemplate = new DES3SecretKey();<a name="line.233"></a>
<FONT color="green">234</FONT>                  secretKeyTemplate.getEncrypt().setBooleanValue(Boolean.TRUE);<a name="line.234"></a>
<FONT color="green">235</FONT>                  secretKeyTemplate.getDecrypt().setBooleanValue(Boolean.TRUE);<a name="line.235"></a>
<FONT color="green">236</FONT>                  // we only have a read-only session, thus we only create a session object<a name="line.236"></a>
<FONT color="green">237</FONT>                  secretKeyTemplate.getToken().setBooleanValue(Boolean.FALSE);<a name="line.237"></a>
<FONT color="green">238</FONT>    <a name="line.238"></a>
<FONT color="green">239</FONT>                  selectedEncryptionKey = (DES3SecretKey) session.generateKey(keyGenerationMechanism, secretKeyTemplate);<a name="line.239"></a>
<FONT color="green">240</FONT>                } else {<a name="line.240"></a>
<FONT color="green">241</FONT>                  output_.flush();<a name="line.241"></a>
<FONT color="green">242</FONT>                  System.exit(0);<a name="line.242"></a>
<FONT color="green">243</FONT>                }<a name="line.243"></a>
<FONT color="green">244</FONT>              } else {<a name="line.244"></a>
<FONT color="green">245</FONT>                output_.println("Found NO Tripple DES key that can be used for encryption.");<a name="line.245"></a>
<FONT color="green">246</FONT>                output_.println("This token does not support generation of Tripple DES keys.");<a name="line.246"></a>
<FONT color="green">247</FONT>                output_.flush();<a name="line.247"></a>
<FONT color="green">248</FONT>                System.exit(0);<a name="line.248"></a>
<FONT color="green">249</FONT>              }<a name="line.249"></a>
<FONT color="green">250</FONT>            } else {<a name="line.250"></a>
<FONT color="green">251</FONT>              output_.println("found these Tripple DES encryption keys:");<a name="line.251"></a>
<FONT color="green">252</FONT>              Map objectHandleToObjectMap = new HashMap(encryptionKeyList.size());<a name="line.252"></a>
<FONT color="green">253</FONT>              Iterator encryptionKeyListIterator = encryptionKeyList.iterator();<a name="line.253"></a>
<FONT color="green">254</FONT>              while (encryptionKeyListIterator.hasNext()) {<a name="line.254"></a>
<FONT color="green">255</FONT>                Object encryptionKey = (Object) encryptionKeyListIterator.next();<a name="line.255"></a>
<FONT color="green">256</FONT>                long objectHandle = encryptionKey.getObjectHandle();<a name="line.256"></a>
<FONT color="green">257</FONT>                objectHandleToObjectMap.put(new Long(objectHandle), encryptionKey);<a name="line.257"></a>
<FONT color="green">258</FONT>                output_.println("________________________________________________________________________________");<a name="line.258"></a>
<FONT color="green">259</FONT>                output_.println("Object with handle: " + objectHandle);<a name="line.259"></a>
<FONT color="green">260</FONT>                output_.println(encryptionKey);<a name="line.260"></a>
<FONT color="green">261</FONT>                output_.println("________________________________________________________________________________");<a name="line.261"></a>
<FONT color="green">262</FONT>              }<a name="line.262"></a>
<FONT color="green">263</FONT>    <a name="line.263"></a>
<FONT color="green">264</FONT>              boolean gotObjectHandle = false;<a name="line.264"></a>
<FONT color="green">265</FONT>              Long selectedObjectHandle;<a name="line.265"></a>
<FONT color="green">266</FONT>              while (!gotObjectHandle) {<a name="line.266"></a>
<FONT color="green">267</FONT>                output_.print("Enter the handle of the key to use for encryption or 'x' to exit: ");<a name="line.267"></a>
<FONT color="green">268</FONT>                output_.flush();<a name="line.268"></a>
<FONT color="green">269</FONT>                String objectHandleString = input_.readLine();<a name="line.269"></a>
<FONT color="green">270</FONT>                if (objectHandleString.equalsIgnoreCase("x")) {<a name="line.270"></a>
<FONT color="green">271</FONT>                  System.exit(0);<a name="line.271"></a>
<FONT color="green">272</FONT>                }<a name="line.272"></a>
<FONT color="green">273</FONT>                try {<a name="line.273"></a>
<FONT color="green">274</FONT>                  selectedObjectHandle = new Long(objectHandleString);<a name="line.274"></a>
<FONT color="green">275</FONT>                  selectedEncryptionKey = (DES3SecretKey) objectHandleToObjectMap.get(selectedObjectHandle);<a name="line.275"></a>
<FONT color="green">276</FONT>                  if (selectedEncryptionKey != null) {<a name="line.276"></a>
<FONT color="green">277</FONT>                    gotObjectHandle = true;<a name="line.277"></a>
<FONT color="green">278</FONT>                  } else {<a name="line.278"></a>
<FONT color="green">279</FONT>                    output_.println("An object with the handle \"" + objectHandleString + "\" does not exist. Try again.");<a name="line.279"></a>
<FONT color="green">280</FONT>                  }<a name="line.280"></a>
<FONT color="green">281</FONT>                } catch (NumberFormatException ex) {<a name="line.281"></a>
<FONT color="green">282</FONT>                  output_.println("The entered handle \"" + objectHandleString + "\" is invalid. Try again.");<a name="line.282"></a>
<FONT color="green">283</FONT>                }<a name="line.283"></a>
<FONT color="green">284</FONT>              }<a name="line.284"></a>
<FONT color="green">285</FONT>            }<a name="line.285"></a>
<FONT color="green">286</FONT>    <a name="line.286"></a>
<FONT color="green">287</FONT>            output_.println("################################################################################");<a name="line.287"></a>
<FONT color="green">288</FONT>    <a name="line.288"></a>
<FONT color="green">289</FONT>            output_.println("################################################################################");<a name="line.289"></a>
<FONT color="green">290</FONT>            output_.println("encrypting data from file: " + args[1]);<a name="line.290"></a>
<FONT color="green">291</FONT>    <a name="line.291"></a>
<FONT color="green">292</FONT>            InputStream dataInputStream = new FileInputStream(args[1]);<a name="line.292"></a>
<FONT color="green">293</FONT>    <a name="line.293"></a>
<FONT color="green">294</FONT>            /* we buffer all data in memory that we can use encrypt(byte[]) instad of several<a name="line.294"></a>
<FONT color="green">295</FONT>             * subsequent encryptUpdate(byte[]) calls, because many tokens do not support this<a name="line.295"></a>
<FONT color="green">296</FONT>             */<a name="line.296"></a>
<FONT color="green">297</FONT>    <a name="line.297"></a>
<FONT color="green">298</FONT>            byte[] dataBuffer = new byte[1024];<a name="line.298"></a>
<FONT color="green">299</FONT>            int bytesRead;<a name="line.299"></a>
<FONT color="green">300</FONT>            ByteArrayOutputStream streamBuffer = new ByteArrayOutputStream();<a name="line.300"></a>
<FONT color="green">301</FONT>    <a name="line.301"></a>
<FONT color="green">302</FONT>            // feed in all data from the input stream<a name="line.302"></a>
<FONT color="green">303</FONT>            while ((bytesRead = dataInputStream.read(dataBuffer)) >= 0) {<a name="line.303"></a>
<FONT color="green">304</FONT>              streamBuffer.write(dataBuffer, 0, bytesRead);<a name="line.304"></a>
<FONT color="green">305</FONT>            }<a name="line.305"></a>
<FONT color="green">306</FONT>            Arrays.fill(dataBuffer, (byte) 0); // ensure that no data is left in the memory<a name="line.306"></a>
<FONT color="green">307</FONT>            streamBuffer.flush();<a name="line.307"></a>
<FONT color="green">308</FONT>            streamBuffer.close();<a name="line.308"></a>
<FONT color="green">309</FONT>            dataInputStream.close();<a name="line.309"></a>
<FONT color="green">310</FONT>            byte[] rawData = streamBuffer.toByteArray();<a name="line.310"></a>
<FONT color="green">311</FONT>    <a name="line.311"></a>
<FONT color="green">312</FONT>            Mechanism selectedMechanism = (Mechanism) Mechanism.DES3_CBC_PAD.clone();<a name="line.312"></a>
<FONT color="green">313</FONT>    <a name="line.313"></a>
<FONT color="green">314</FONT>            byte[] encryptInitializationVector = { 0, 0, 0, 0, 0, 0, 0, 0}; // use random value<a name="line.314"></a>
<FONT color="green">315</FONT>            InitializationVectorParameters encryptInitializationVectorParameters =<a name="line.315"></a>
<FONT color="green">316</FONT>                new InitializationVectorParameters(encryptInitializationVector);<a name="line.316"></a>
<FONT color="green">317</FONT>            selectedMechanism.setParameters(encryptInitializationVectorParameters);<a name="line.317"></a>
<FONT color="green">318</FONT>    <a name="line.318"></a>
<FONT color="green">319</FONT>            output_.print("encrypting the data... ");<a name="line.319"></a>
<FONT color="green">320</FONT>    <a name="line.320"></a>
<FONT color="green">321</FONT>            // initialize for encryption<a name="line.321"></a>
<FONT color="green">322</FONT>            session.encryptInit(selectedMechanism, selectedEncryptionKey);<a name="line.322"></a>
<FONT color="green">323</FONT>    <a name="line.323"></a>
<FONT color="green">324</FONT>            byte[] encryptedData = session.encrypt(rawData);<a name="line.324"></a>
<FONT color="green">325</FONT>    <a name="line.325"></a>
<FONT color="green">326</FONT>            output_.println("finished");<a name="line.326"></a>
<FONT color="green">327</FONT>    <a name="line.327"></a>
<FONT color="green">328</FONT>            output_.print("writing encrypted data to file \"" + args[2] + "\"...");<a name="line.328"></a>
<FONT color="green">329</FONT>    <a name="line.329"></a>
<FONT color="green">330</FONT>            FileOutputStream outputStream = new FileOutputStream(args[2]);<a name="line.330"></a>
<FONT color="green">331</FONT>            outputStream.write(encryptedData);<a name="line.331"></a>
<FONT color="green">332</FONT>            outputStream.flush();<a name="line.332"></a>
<FONT color="green">333</FONT>            outputStream.close();<a name="line.333"></a>
<FONT color="green">334</FONT>    <a name="line.334"></a>
<FONT color="green">335</FONT>            output_.println("finished");<a name="line.335"></a>
<FONT color="green">336</FONT>    <a name="line.336"></a>
<FONT color="green">337</FONT>            output_.println("################################################################################");<a name="line.337"></a>
<FONT color="green">338</FONT>    <a name="line.338"></a>
<FONT color="green">339</FONT>            output_.println("################################################################################");<a name="line.339"></a>
<FONT color="green">340</FONT>            <a name="line.340"></a>
<FONT color="green">341</FONT>            if (!des3CbcMechanismInfo.isDecrypt()) {<a name="line.341"></a>
<FONT color="green">342</FONT>                output_.print("This token does not support Tripple DES for decryption!");<a name="line.342"></a>
<FONT color="green">343</FONT>            } else {       <a name="line.343"></a>
<FONT color="green">344</FONT>              if (!selectedEncryptionKey.getDecrypt().getBooleanValue().booleanValue()) {<a name="line.344"></a>
<FONT color="green">345</FONT>                output_.print("The selected key cannot be used for decryption!");<a name="line.345"></a>
<FONT color="green">346</FONT>              } else {           <a name="line.346"></a>
<FONT color="green">347</FONT>                output_.println("decrypting data from file: " + args[2]);<a name="line.347"></a>
<FONT color="green">348</FONT>                <a name="line.348"></a>
<FONT color="green">349</FONT>                // we alread have the data in the encryptedData array<a name="line.349"></a>
<FONT color="green">350</FONT>        <a name="line.350"></a>
<FONT color="green">351</FONT>                // use same mechanism and IV as before<a name="line.351"></a>
<FONT color="green">352</FONT>                selectedMechanism = (Mechanism) Mechanism.DES3_CBC_PAD.clone();<a name="line.352"></a>
<FONT color="green">353</FONT>                selectedMechanism.setParameters(encryptInitializationVectorParameters);<a name="line.353"></a>
<FONT color="green">354</FONT>        <a name="line.354"></a>
<FONT color="green">355</FONT>                output_.print("decrypting the data... ");<a name="line.355"></a>
<FONT color="green">356</FONT>        <a name="line.356"></a>
<FONT color="green">357</FONT>                // initialize for encryption<a name="line.357"></a>
<FONT color="green">358</FONT>                session.decryptInit(selectedMechanism, selectedEncryptionKey);<a name="line.358"></a>
<FONT color="green">359</FONT>        <a name="line.359"></a>
<FONT color="green">360</FONT>                byte[] decryptedData = session.decrypt(encryptedData);<a name="line.360"></a>
<FONT color="green">361</FONT>        <a name="line.361"></a>
<FONT color="green">362</FONT>                output_.println("finished");<a name="line.362"></a>
<FONT color="green">363</FONT>        <a name="line.363"></a>
<FONT color="green">364</FONT>                // compare initial data and decrypted data<a name="line.364"></a>
<FONT color="green">365</FONT>                boolean equal = false;<a name="line.365"></a>
<FONT color="green">366</FONT>                if (rawData.length != decryptedData.length) {<a name="line.366"></a>
<FONT color="green">367</FONT>                  equal = false;<a name="line.367"></a>
<FONT color="green">368</FONT>                } else {<a name="line.368"></a>
<FONT color="green">369</FONT>                  equal = true;<a name="line.369"></a>
<FONT color="green">370</FONT>                  for (int i=0; i &lt; rawData.length; i++) {<a name="line.370"></a>
<FONT color="green">371</FONT>                    if (rawData[i] != decryptedData[i]) {<a name="line.371"></a>
<FONT color="green">372</FONT>                      equal = false;<a name="line.372"></a>
<FONT color="green">373</FONT>                      break;<a name="line.373"></a>
<FONT color="green">374</FONT>                    }<a name="line.374"></a>
<FONT color="green">375</FONT>                  }<a name="line.375"></a>
<FONT color="green">376</FONT>                }<a name="line.376"></a>
<FONT color="green">377</FONT>    <a name="line.377"></a>
<FONT color="green">378</FONT>                output_.println("decryption " + ((equal) ? "successful" : "FAILED"));<a name="line.378"></a>
<FONT color="green">379</FONT>        <a name="line.379"></a>
<FONT color="green">380</FONT>                output_.println("finished");<a name="line.380"></a>
<FONT color="green">381</FONT>              }<a name="line.381"></a>
<FONT color="green">382</FONT>            }<a name="line.382"></a>
<FONT color="green">383</FONT>    <a name="line.383"></a>
<FONT color="green">384</FONT>            output_.println("################################################################################");<a name="line.384"></a>
<FONT color="green">385</FONT>    <a name="line.385"></a>
<FONT color="green">386</FONT>            session.closeSession();<a name="line.386"></a>
<FONT color="green">387</FONT>            pkcs11Module.finalize(null);<a name="line.387"></a>
<FONT color="green">388</FONT>    <a name="line.388"></a>
<FONT color="green">389</FONT>        } catch (Throwable thr) {<a name="line.389"></a>
<FONT color="green">390</FONT>          thr.printStackTrace();<a name="line.390"></a>
<FONT color="green">391</FONT>        }<a name="line.391"></a>
<FONT color="green">392</FONT>      }<a name="line.392"></a>
<FONT color="green">393</FONT>    <a name="line.393"></a>
<FONT color="green">394</FONT>      public static void printUsage() {<a name="line.394"></a>
<FONT color="green">395</FONT>        output_.println("Usage: Encrypt &lt;PKCS#11 module> &lt;file to be encrypted> &lt;encrypted file>");<a name="line.395"></a>
<FONT color="green">396</FONT>        output_.println(" e.g.: Encrypt pk2priv.dll data.dat data.enc");<a name="line.396"></a>
<FONT color="green">397</FONT>        output_.println("The given DLL must be in the search path of the system.");<a name="line.397"></a>
<FONT color="green">398</FONT>      }<a name="line.398"></a>
<FONT color="green">399</FONT>    <a name="line.399"></a>
<FONT color="green">400</FONT>    }<a name="line.400"></a>




























































</PRE>
</BODY>
</HTML>
