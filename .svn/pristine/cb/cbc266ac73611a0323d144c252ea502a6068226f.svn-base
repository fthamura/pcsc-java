<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* Copyright  (c) 2002 Graz University of Technology. All rights reserved.<a name="line.1"></a>
<FONT color="green">002</FONT>     *<a name="line.2"></a>
<FONT color="green">003</FONT>     * Redistribution and use in  source and binary forms, with or without <a name="line.3"></a>
<FONT color="green">004</FONT>     * modification, are permitted  provided that the following conditions are met:<a name="line.4"></a>
<FONT color="green">005</FONT>     *<a name="line.5"></a>
<FONT color="green">006</FONT>     * 1. Redistributions of  source code must retain the above copyright notice,<a name="line.6"></a>
<FONT color="green">007</FONT>     *    this list of conditions and the following disclaimer.<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * 2. Redistributions in  binary form must reproduce the above copyright notice,<a name="line.9"></a>
<FONT color="green">010</FONT>     *    this list of conditions and the following disclaimer in the documentation<a name="line.10"></a>
<FONT color="green">011</FONT>     *    and/or other materials provided with the distribution.<a name="line.11"></a>
<FONT color="green">012</FONT>     *  <a name="line.12"></a>
<FONT color="green">013</FONT>     * 3. The end-user documentation included with the redistribution, if any, must<a name="line.13"></a>
<FONT color="green">014</FONT>     *    include the following acknowledgment:<a name="line.14"></a>
<FONT color="green">015</FONT>     * <a name="line.15"></a>
<FONT color="green">016</FONT>     *    "This product includes software developed by IAIK of Graz University of<a name="line.16"></a>
<FONT color="green">017</FONT>     *     Technology."<a name="line.17"></a>
<FONT color="green">018</FONT>     * <a name="line.18"></a>
<FONT color="green">019</FONT>     *    Alternately, this acknowledgment may appear in the software itself, if <a name="line.19"></a>
<FONT color="green">020</FONT>     *    and wherever such third-party acknowledgments normally appear.<a name="line.20"></a>
<FONT color="green">021</FONT>     *  <a name="line.21"></a>
<FONT color="green">022</FONT>     * 4. The names "Graz University of Technology" and "IAIK of Graz University of<a name="line.22"></a>
<FONT color="green">023</FONT>     *    Technology" must not be used to endorse or promote products derived from <a name="line.23"></a>
<FONT color="green">024</FONT>     *    this software without prior written permission.<a name="line.24"></a>
<FONT color="green">025</FONT>     *  <a name="line.25"></a>
<FONT color="green">026</FONT>     * 5. Products derived from this software may not be called <a name="line.26"></a>
<FONT color="green">027</FONT>     *    "IAIK PKCS Wrapper", nor may "IAIK" appear in their name, without prior <a name="line.27"></a>
<FONT color="green">028</FONT>     *    written permission of Graz University of Technology.<a name="line.28"></a>
<FONT color="green">029</FONT>     *  <a name="line.29"></a>
<FONT color="green">030</FONT>     *  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED<a name="line.30"></a>
<FONT color="green">031</FONT>     *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED<a name="line.31"></a>
<FONT color="green">032</FONT>     *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR<a name="line.32"></a>
<FONT color="green">033</FONT>     *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE LICENSOR BE<a name="line.33"></a>
<FONT color="green">034</FONT>     *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,<a name="line.34"></a>
<FONT color="green">035</FONT>     *  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,<a name="line.35"></a>
<FONT color="green">036</FONT>     *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,<a name="line.36"></a>
<FONT color="green">037</FONT>     *  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON<a name="line.37"></a>
<FONT color="green">038</FONT>     *  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,<a name="line.38"></a>
<FONT color="green">039</FONT>     *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY<a name="line.39"></a>
<FONT color="green">040</FONT>     *  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE<a name="line.40"></a>
<FONT color="green">041</FONT>     *  POSSIBILITY  OF SUCH DAMAGE.<a name="line.41"></a>
<FONT color="green">042</FONT>     */<a name="line.42"></a>
<FONT color="green">043</FONT>    <a name="line.43"></a>
<FONT color="green">044</FONT>    package demo.pkcs.pkcs11;<a name="line.44"></a>
<FONT color="green">045</FONT>    <a name="line.45"></a>
<FONT color="green">046</FONT>    import iaik.pkcs.pkcs11.Mechanism;<a name="line.46"></a>
<FONT color="green">047</FONT>    import iaik.pkcs.pkcs11.MechanismInfo;<a name="line.47"></a>
<FONT color="green">048</FONT>    import iaik.pkcs.pkcs11.Module;<a name="line.48"></a>
<FONT color="green">049</FONT>    import iaik.pkcs.pkcs11.Session;<a name="line.49"></a>
<FONT color="green">050</FONT>    import iaik.pkcs.pkcs11.Token;<a name="line.50"></a>
<FONT color="green">051</FONT>    import iaik.pkcs.pkcs11.TokenException;<a name="line.51"></a>
<FONT color="green">052</FONT>    import iaik.pkcs.pkcs11.TokenInfo;<a name="line.52"></a>
<FONT color="green">053</FONT>    import iaik.pkcs.pkcs11.Version;<a name="line.53"></a>
<FONT color="green">054</FONT>    import iaik.pkcs.pkcs11.objects.Attribute;<a name="line.54"></a>
<FONT color="green">055</FONT>    import iaik.pkcs.pkcs11.objects.DateAttribute;<a name="line.55"></a>
<FONT color="green">056</FONT>    import iaik.pkcs.pkcs11.objects.GenericTemplate;<a name="line.56"></a>
<FONT color="green">057</FONT>    import iaik.pkcs.pkcs11.objects.KeyPair;<a name="line.57"></a>
<FONT color="green">058</FONT>    import iaik.pkcs.pkcs11.objects.Object;<a name="line.58"></a>
<FONT color="green">059</FONT>    import iaik.pkcs.pkcs11.objects.RSAPrivateKey;<a name="line.59"></a>
<FONT color="green">060</FONT>    import iaik.pkcs.pkcs11.objects.RSAPublicKey;<a name="line.60"></a>
<FONT color="green">061</FONT>    import iaik.pkcs.pkcs11.wrapper.Functions;<a name="line.61"></a>
<FONT color="green">062</FONT>    import iaik.pkcs.pkcs11.wrapper.PKCS11Constants;<a name="line.62"></a>
<FONT color="green">063</FONT>    import iaik.security.provider.IAIK;<a name="line.63"></a>
<FONT color="green">064</FONT>    <a name="line.64"></a>
<FONT color="green">065</FONT>    import java.io.BufferedReader;<a name="line.65"></a>
<FONT color="green">066</FONT>    import java.io.FileOutputStream;<a name="line.66"></a>
<FONT color="green">067</FONT>    import java.io.InputStreamReader;<a name="line.67"></a>
<FONT color="green">068</FONT>    import java.io.PrintWriter;<a name="line.68"></a>
<FONT color="green">069</FONT>    import java.math.BigInteger;<a name="line.69"></a>
<FONT color="green">070</FONT>    import java.security.KeyFactory;<a name="line.70"></a>
<FONT color="green">071</FONT>    import java.security.Security;<a name="line.71"></a>
<FONT color="green">072</FONT>    import java.security.spec.RSAPublicKeySpec;<a name="line.72"></a>
<FONT color="green">073</FONT>    import java.security.spec.X509EncodedKeySpec;<a name="line.73"></a>
<FONT color="green">074</FONT>    import java.util.Arrays;<a name="line.74"></a>
<FONT color="green">075</FONT>    import java.util.Calendar;<a name="line.75"></a>
<FONT color="green">076</FONT>    import java.util.GregorianCalendar;<a name="line.76"></a>
<FONT color="green">077</FONT>    import java.util.HashSet;<a name="line.77"></a>
<FONT color="green">078</FONT>    import java.util.Random;<a name="line.78"></a>
<FONT color="green">079</FONT>    <a name="line.79"></a>
<FONT color="green">080</FONT>    <a name="line.80"></a>
<FONT color="green">081</FONT>    <a name="line.81"></a>
<FONT color="green">082</FONT>    /**<a name="line.82"></a>
<FONT color="green">083</FONT>     * This demo program generates a 1024 bit RSA key-pair on the token and writes<a name="line.83"></a>
<FONT color="green">084</FONT>     * the public key to a file.<a name="line.84"></a>
<FONT color="green">085</FONT>     *<a name="line.85"></a>
<FONT color="green">086</FONT>     * @author &lt;a href="mailto:Karl.Scheibelhofer@iaik.at"> Karl Scheibelhofer &lt;/a><a name="line.86"></a>
<FONT color="green">087</FONT>     * @version 0.1<a name="line.87"></a>
<FONT color="green">088</FONT>     * @invariants<a name="line.88"></a>
<FONT color="green">089</FONT>     */<a name="line.89"></a>
<FONT color="green">090</FONT>    public class GenerateKeyPair {<a name="line.90"></a>
<FONT color="green">091</FONT>    <a name="line.91"></a>
<FONT color="green">092</FONT>      static BufferedReader input_;<a name="line.92"></a>
<FONT color="green">093</FONT>    <a name="line.93"></a>
<FONT color="green">094</FONT>      static PrintWriter output_;<a name="line.94"></a>
<FONT color="green">095</FONT>    <a name="line.95"></a>
<FONT color="green">096</FONT>      static {<a name="line.96"></a>
<FONT color="green">097</FONT>        try {<a name="line.97"></a>
<FONT color="green">098</FONT>          //output_ = new PrintWriter(new FileWriter("SignAndVerify_output.txt"), true);<a name="line.98"></a>
<FONT color="green">099</FONT>          output_ = new PrintWriter(System.out, true);<a name="line.99"></a>
<FONT color="green">100</FONT>          input_ = new BufferedReader(new InputStreamReader(System.in));<a name="line.100"></a>
<FONT color="green">101</FONT>        } catch (Throwable thr) {<a name="line.101"></a>
<FONT color="green">102</FONT>          thr.printStackTrace();<a name="line.102"></a>
<FONT color="green">103</FONT>          output_ = new PrintWriter(System.out, true);<a name="line.103"></a>
<FONT color="green">104</FONT>          input_ = new BufferedReader(new InputStreamReader(System.in));<a name="line.104"></a>
<FONT color="green">105</FONT>       }<a name="line.105"></a>
<FONT color="green">106</FONT>      }<a name="line.106"></a>
<FONT color="green">107</FONT>    <a name="line.107"></a>
<FONT color="green">108</FONT>      public static void main(String[] args) {<a name="line.108"></a>
<FONT color="green">109</FONT>        if (args.length != 2) {<a name="line.109"></a>
<FONT color="green">110</FONT>          printUsage();<a name="line.110"></a>
<FONT color="green">111</FONT>          System.exit(1);<a name="line.111"></a>
<FONT color="green">112</FONT>        }<a name="line.112"></a>
<FONT color="green">113</FONT>    <a name="line.113"></a>
<FONT color="green">114</FONT>        try {<a name="line.114"></a>
<FONT color="green">115</FONT>    <a name="line.115"></a>
<FONT color="green">116</FONT>          Security.addProvider(new IAIK());<a name="line.116"></a>
<FONT color="green">117</FONT>    <a name="line.117"></a>
<FONT color="green">118</FONT>          Module pkcs11Module = Module.getInstance(args[0]);<a name="line.118"></a>
<FONT color="green">119</FONT>          pkcs11Module.initialize(null);<a name="line.119"></a>
<FONT color="green">120</FONT>    <a name="line.120"></a>
<FONT color="green">121</FONT>          Token token = Util.selectToken(pkcs11Module, output_, input_);<a name="line.121"></a>
<FONT color="green">122</FONT>          TokenInfo tokenInfo = token.getTokenInfo();<a name="line.122"></a>
<FONT color="green">123</FONT>    <a name="line.123"></a>
<FONT color="green">124</FONT>          output_.println("################################################################################");<a name="line.124"></a>
<FONT color="green">125</FONT>          output_.println("Information of Token:");<a name="line.125"></a>
<FONT color="green">126</FONT>          output_.println(tokenInfo);<a name="line.126"></a>
<FONT color="green">127</FONT>          output_.println("################################################################################");<a name="line.127"></a>
<FONT color="green">128</FONT>    <a name="line.128"></a>
<FONT color="green">129</FONT>          Session session = Util.openAuthorizedSession(token, Token.SessionReadWriteBehavior.RW_SESSION, output_, input_);<a name="line.129"></a>
<FONT color="green">130</FONT>              // token.openSession(Token.SessionType.SERIAL_SESSION, Token.SessionReadWriteBehavior.RW_SESSION, null, null);<a name="line.130"></a>
<FONT color="green">131</FONT>    <a name="line.131"></a>
<FONT color="green">132</FONT>          output_.println("################################################################################");<a name="line.132"></a>
<FONT color="green">133</FONT>          output_.print("Generating new 1024 bit RSA key-pair... ");<a name="line.133"></a>
<FONT color="green">134</FONT>          output_.flush();<a name="line.134"></a>
<FONT color="green">135</FONT>    <a name="line.135"></a>
<FONT color="green">136</FONT>          // first check out what attributes of the keys we may set<a name="line.136"></a>
<FONT color="green">137</FONT>          HashSet supportedMechanisms = new HashSet(Arrays.asList(token.getMechanismList()));<a name="line.137"></a>
<FONT color="green">138</FONT>    <a name="line.138"></a>
<FONT color="green">139</FONT>          MechanismInfo signatureMechanismInfo;<a name="line.139"></a>
<FONT color="green">140</FONT>          if (supportedMechanisms.contains(Mechanism.RSA_PKCS)) {<a name="line.140"></a>
<FONT color="green">141</FONT>            signatureMechanismInfo = token.getMechanismInfo(Mechanism.RSA_PKCS);<a name="line.141"></a>
<FONT color="green">142</FONT>          } else if (supportedMechanisms.contains(Mechanism.RSA_X_509)) {<a name="line.142"></a>
<FONT color="green">143</FONT>            signatureMechanismInfo = token.getMechanismInfo(Mechanism.RSA_X_509);<a name="line.143"></a>
<FONT color="green">144</FONT>          } else if (supportedMechanisms.contains(Mechanism.RSA_9796)) {<a name="line.144"></a>
<FONT color="green">145</FONT>            signatureMechanismInfo = token.getMechanismInfo(Mechanism.RSA_9796);<a name="line.145"></a>
<FONT color="green">146</FONT>          } else if (supportedMechanisms.contains(Mechanism.RSA_PKCS_OAEP)) {<a name="line.146"></a>
<FONT color="green">147</FONT>            signatureMechanismInfo = token.getMechanismInfo(Mechanism.RSA_PKCS_OAEP);<a name="line.147"></a>
<FONT color="green">148</FONT>          } else {<a name="line.148"></a>
<FONT color="green">149</FONT>            signatureMechanismInfo = null;<a name="line.149"></a>
<FONT color="green">150</FONT>          }<a name="line.150"></a>
<FONT color="green">151</FONT>    <a name="line.151"></a>
<FONT color="green">152</FONT>          Mechanism keyPairGenerationMechanism = Mechanism.RSA_PKCS_KEY_PAIR_GEN;<a name="line.152"></a>
<FONT color="green">153</FONT>          RSAPublicKey rsaPublicKeyTemplate = new RSAPublicKey();<a name="line.153"></a>
<FONT color="green">154</FONT>          RSAPrivateKey rsaPrivateKeyTemplate = new RSAPrivateKey();<a name="line.154"></a>
<FONT color="green">155</FONT>    <a name="line.155"></a>
<FONT color="green">156</FONT>          // set the general attributes for the public key<a name="line.156"></a>
<FONT color="green">157</FONT>          rsaPublicKeyTemplate.getModulusBits().setLongValue(new Long(1024));<a name="line.157"></a>
<FONT color="green">158</FONT>          byte[] publicExponentBytes = {0x01, 0x00, 0x01}; // 2^16 + 1<a name="line.158"></a>
<FONT color="green">159</FONT>          rsaPublicKeyTemplate.getPublicExponent().setByteArrayValue(publicExponentBytes);<a name="line.159"></a>
<FONT color="green">160</FONT>          rsaPublicKeyTemplate.getToken().setBooleanValue(Boolean.FALSE);<a name="line.160"></a>
<FONT color="green">161</FONT>          byte[] id = new byte[20];<a name="line.161"></a>
<FONT color="green">162</FONT>          new Random().nextBytes(id);<a name="line.162"></a>
<FONT color="green">163</FONT>          rsaPublicKeyTemplate.getId().setByteArrayValue(id);<a name="line.163"></a>
<FONT color="green">164</FONT>          //rsaPublicKeyTemplate.getLabel().setCharArrayValue(args[2].toCharArray());<a name="line.164"></a>
<FONT color="green">165</FONT>    <a name="line.165"></a>
<FONT color="green">166</FONT>          rsaPrivateKeyTemplate.getSensitive().setBooleanValue(Boolean.TRUE);<a name="line.166"></a>
<FONT color="green">167</FONT>         rsaPrivateKeyTemplate.getToken().setBooleanValue(Boolean.FALSE);<a name="line.167"></a>
<FONT color="green">168</FONT>          rsaPrivateKeyTemplate.getPrivate().setBooleanValue(Boolean.TRUE);<a name="line.168"></a>
<FONT color="green">169</FONT>          rsaPrivateKeyTemplate.getId().setByteArrayValue(id);<a name="line.169"></a>
<FONT color="green">170</FONT>          //byte[] subject = args[1].getBytes();<a name="line.170"></a>
<FONT color="green">171</FONT>          //rsaPrivateKeyTemplate.getSubject().setByteArrayValue(subject);<a name="line.171"></a>
<FONT color="green">172</FONT>          //rsaPrivateKeyTemplate.getLabel().setCharArrayValue(args[2].toCharArray());<a name="line.172"></a>
<FONT color="green">173</FONT>    <a name="line.173"></a>
<FONT color="green">174</FONT>          try{<a name="line.174"></a>
<FONT color="green">175</FONT>                            Version cryptokiVersion = pkcs11Module.getInfo().getCryptokiVersion();<a name="line.175"></a>
<FONT color="green">176</FONT>                            if ((cryptokiVersion.getMajor() >= 2) && (cryptokiVersion.getMinor() >= 20)){<a name="line.176"></a>
<FONT color="green">177</FONT>                        GenericTemplate wrapTemplate = new GenericTemplate();<a name="line.177"></a>
<FONT color="green">178</FONT>                        GregorianCalendar startDate = new GregorianCalendar();<a name="line.178"></a>
<FONT color="green">179</FONT>                        startDate.add(Calendar.HOUR_OF_DAY, -1);<a name="line.179"></a>
<FONT color="green">180</FONT>                                DateAttribute startDateAttr = new DateAttribute(Attribute.START_DATE);<a name="line.180"></a>
<FONT color="green">181</FONT>                                startDateAttr.setDateValue(startDate.getTime());<a name="line.181"></a>
<FONT color="green">182</FONT>                                wrapTemplate.addAttribute(startDateAttr);<a name="line.182"></a>
<FONT color="green">183</FONT>                        GregorianCalendar endDate = new GregorianCalendar();<a name="line.183"></a>
<FONT color="green">184</FONT>                        endDate.add(Calendar.MONTH, 11);<a name="line.184"></a>
<FONT color="green">185</FONT>                                DateAttribute endDateAttr = new DateAttribute(Attribute.END_DATE);<a name="line.185"></a>
<FONT color="green">186</FONT>                                endDateAttr.setDateValue(endDate.getTime());<a name="line.186"></a>
<FONT color="green">187</FONT>                                wrapTemplate.addAttribute(endDateAttr);<a name="line.187"></a>
<FONT color="green">188</FONT>                                rsaPublicKeyTemplate.getWrapTemplate().setAttributeArrayValue(wrapTemplate);<a name="line.188"></a>
<FONT color="green">189</FONT>                    <a name="line.189"></a>
<FONT color="green">190</FONT>                        Mechanism[] allowedMechanisms = new Mechanism[1];<a name="line.190"></a>
<FONT color="green">191</FONT>                        Mechanism mechanism1 = new Mechanism(PKCS11Constants.CKM_RSA_PKCS);<a name="line.191"></a>
<FONT color="green">192</FONT>                        allowedMechanisms[0] = mechanism1;<a name="line.192"></a>
<FONT color="green">193</FONT>                        rsaPrivateKeyTemplate.getAllowedMechanisms().setMechanismAttributeArrayValue(allowedMechanisms);<a name="line.193"></a>
<FONT color="green">194</FONT>                            }<a name="line.194"></a>
<FONT color="green">195</FONT>          }catch(TokenException e){<a name="line.195"></a>
<FONT color="green">196</FONT>            //ignore<a name="line.196"></a>
<FONT color="green">197</FONT>          }<a name="line.197"></a>
<FONT color="green">198</FONT>          <a name="line.198"></a>
<FONT color="green">199</FONT>          // set the attributes in a way netscape does, this should work with most tokens<a name="line.199"></a>
<FONT color="green">200</FONT>          if (signatureMechanismInfo != null) {<a name="line.200"></a>
<FONT color="green">201</FONT>            rsaPublicKeyTemplate.getVerify().setBooleanValue(new Boolean(signatureMechanismInfo.isVerify()));<a name="line.201"></a>
<FONT color="green">202</FONT>            rsaPublicKeyTemplate.getVerifyRecover().setBooleanValue(new Boolean(signatureMechanismInfo.isVerifyRecover()));<a name="line.202"></a>
<FONT color="green">203</FONT>            rsaPublicKeyTemplate.getEncrypt().setBooleanValue(new Boolean(signatureMechanismInfo.isEncrypt()));<a name="line.203"></a>
<FONT color="green">204</FONT>            rsaPublicKeyTemplate.getDerive().setBooleanValue(new Boolean(signatureMechanismInfo.isDerive()));<a name="line.204"></a>
<FONT color="green">205</FONT>            rsaPublicKeyTemplate.getWrap().setBooleanValue(new Boolean(signatureMechanismInfo.isWrap()));<a name="line.205"></a>
<FONT color="green">206</FONT>    <a name="line.206"></a>
<FONT color="green">207</FONT>            rsaPrivateKeyTemplate.getSign().setBooleanValue(new Boolean(signatureMechanismInfo.isSign()));<a name="line.207"></a>
<FONT color="green">208</FONT>            rsaPrivateKeyTemplate.getSignRecover().setBooleanValue(new Boolean(signatureMechanismInfo.isSignRecover()));<a name="line.208"></a>
<FONT color="green">209</FONT>            rsaPrivateKeyTemplate.getDecrypt().setBooleanValue(new Boolean(signatureMechanismInfo.isDecrypt()));<a name="line.209"></a>
<FONT color="green">210</FONT>            rsaPrivateKeyTemplate.getDerive().setBooleanValue(new Boolean(signatureMechanismInfo.isDerive()));<a name="line.210"></a>
<FONT color="green">211</FONT>            rsaPrivateKeyTemplate.getUnwrap().setBooleanValue(new Boolean(signatureMechanismInfo.isUnwrap()));<a name="line.211"></a>
<FONT color="green">212</FONT>          } else {<a name="line.212"></a>
<FONT color="green">213</FONT>            // if we have no information we assume these attributes<a name="line.213"></a>
<FONT color="green">214</FONT>            rsaPrivateKeyTemplate.getSign().setBooleanValue(Boolean.TRUE);<a name="line.214"></a>
<FONT color="green">215</FONT>            rsaPrivateKeyTemplate.getDecrypt().setBooleanValue(Boolean.TRUE);<a name="line.215"></a>
<FONT color="green">216</FONT>    <a name="line.216"></a>
<FONT color="green">217</FONT>            rsaPublicKeyTemplate.getVerify().setBooleanValue(Boolean.TRUE);<a name="line.217"></a>
<FONT color="green">218</FONT>            rsaPublicKeyTemplate.getEncrypt().setBooleanValue(Boolean.TRUE);<a name="line.218"></a>
<FONT color="green">219</FONT>          }<a name="line.219"></a>
<FONT color="green">220</FONT>    <a name="line.220"></a>
<FONT color="green">221</FONT>          // netscape does not set these attribute, so we do no either<a name="line.221"></a>
<FONT color="green">222</FONT>          rsaPublicKeyTemplate.getKeyType().setPresent(false);<a name="line.222"></a>
<FONT color="green">223</FONT>          rsaPublicKeyTemplate.getObjectClass().setPresent(false);<a name="line.223"></a>
<FONT color="green">224</FONT>    <a name="line.224"></a>
<FONT color="green">225</FONT>          rsaPrivateKeyTemplate.getKeyType().setPresent(false);<a name="line.225"></a>
<FONT color="green">226</FONT>          rsaPrivateKeyTemplate.getObjectClass().setPresent(false);<a name="line.226"></a>
<FONT color="green">227</FONT>    <a name="line.227"></a>
<FONT color="green">228</FONT>          long time0 = System.currentTimeMillis();<a name="line.228"></a>
<FONT color="green">229</FONT>          KeyPair generatedKeyPair = session.generateKeyPair(keyPairGenerationMechanism, rsaPublicKeyTemplate, rsaPrivateKeyTemplate);<a name="line.229"></a>
<FONT color="green">230</FONT>          long time1 = System.currentTimeMillis();<a name="line.230"></a>
<FONT color="green">231</FONT>    <a name="line.231"></a>
<FONT color="green">232</FONT>          RSAPublicKey generatedRSAPublicKey = (RSAPublicKey) generatedKeyPair.getPublicKey();<a name="line.232"></a>
<FONT color="green">233</FONT>          RSAPrivateKey generatedRSAPrivateKey = (RSAPrivateKey) generatedKeyPair.getPrivateKey();<a name="line.233"></a>
<FONT color="green">234</FONT>          // no we may work with the keys...<a name="line.234"></a>
<FONT color="green">235</FONT>    <a name="line.235"></a>
<FONT color="green">236</FONT>          output_.println("Success [took " + (time1 - time0) + " milliseconds]");<a name="line.236"></a>
<FONT color="green">237</FONT>          output_.println("The public key is");<a name="line.237"></a>
<FONT color="green">238</FONT>          output_.println("_______________________________________________________________________________");<a name="line.238"></a>
<FONT color="green">239</FONT>          output_.println(generatedRSAPublicKey);<a name="line.239"></a>
<FONT color="green">240</FONT>          output_.println("_______________________________________________________________________________");<a name="line.240"></a>
<FONT color="green">241</FONT>          output_.println("The private key is");<a name="line.241"></a>
<FONT color="green">242</FONT>          output_.println("_______________________________________________________________________________");<a name="line.242"></a>
<FONT color="green">243</FONT>          output_.println(generatedRSAPrivateKey);<a name="line.243"></a>
<FONT color="green">244</FONT>          output_.println("_______________________________________________________________________________");<a name="line.244"></a>
<FONT color="green">245</FONT>    <a name="line.245"></a>
<FONT color="green">246</FONT>          // write the public key to file<a name="line.246"></a>
<FONT color="green">247</FONT>          output_.println("################################################################################");<a name="line.247"></a>
<FONT color="green">248</FONT>          output_.println("Writing the public key of the generated key-pair to file: " + args[1]);<a name="line.248"></a>
<FONT color="green">249</FONT>          RSAPublicKey exportableRsaPublicKey = generatedRSAPublicKey;<a name="line.249"></a>
<FONT color="green">250</FONT>          BigInteger modulus = new BigInteger(1, exportableRsaPublicKey.getModulus().getByteArrayValue());<a name="line.250"></a>
<FONT color="green">251</FONT>          BigInteger publicExponent = new BigInteger(1, exportableRsaPublicKey.getPublicExponent().getByteArrayValue());<a name="line.251"></a>
<FONT color="green">252</FONT>          RSAPublicKeySpec rsaPublicKeySpec = new RSAPublicKeySpec(modulus, publicExponent);<a name="line.252"></a>
<FONT color="green">253</FONT>          KeyFactory keyFactory = KeyFactory.getInstance("RSA");<a name="line.253"></a>
<FONT color="green">254</FONT>          java.security.interfaces.RSAPublicKey javaRsaPublicKey = (java.security.interfaces.RSAPublicKey)<a name="line.254"></a>
<FONT color="green">255</FONT>              keyFactory.generatePublic(rsaPublicKeySpec);<a name="line.255"></a>
<FONT color="green">256</FONT>          X509EncodedKeySpec x509EncodedPublicKey = (X509EncodedKeySpec)<a name="line.256"></a>
<FONT color="green">257</FONT>              keyFactory.getKeySpec(javaRsaPublicKey, X509EncodedKeySpec.class);<a name="line.257"></a>
<FONT color="green">258</FONT>    <a name="line.258"></a>
<FONT color="green">259</FONT>          FileOutputStream publicKeyFileStream = new FileOutputStream(args[1]);<a name="line.259"></a>
<FONT color="green">260</FONT>          publicKeyFileStream.write(x509EncodedPublicKey.getEncoded());<a name="line.260"></a>
<FONT color="green">261</FONT>          publicKeyFileStream.flush();<a name="line.261"></a>
<FONT color="green">262</FONT>          publicKeyFileStream.close();<a name="line.262"></a>
<FONT color="green">263</FONT>    <a name="line.263"></a>
<FONT color="green">264</FONT>          output_.println("################################################################################");<a name="line.264"></a>
<FONT color="green">265</FONT>    <a name="line.265"></a>
<FONT color="green">266</FONT>          // now we try to search for the generated keys<a name="line.266"></a>
<FONT color="green">267</FONT>          output_.println("################################################################################");<a name="line.267"></a>
<FONT color="green">268</FONT>          output_.println("Trying to search for the public key of the generated key-pair by ID: " +<a name="line.268"></a>
<FONT color="green">269</FONT>                          Functions.toHexString(id));<a name="line.269"></a>
<FONT color="green">270</FONT>          // set the search template for the public key<a name="line.270"></a>
<FONT color="green">271</FONT>          RSAPublicKey exportRsaPublicKeyTemplate = new RSAPublicKey();<a name="line.271"></a>
<FONT color="green">272</FONT>          exportRsaPublicKeyTemplate.getId().setByteArrayValue(id);<a name="line.272"></a>
<FONT color="green">273</FONT>    <a name="line.273"></a>
<FONT color="green">274</FONT>          session.findObjectsInit(exportRsaPublicKeyTemplate);<a name="line.274"></a>
<FONT color="green">275</FONT>          Object[] foundPublicKeys = session.findObjects(1);<a name="line.275"></a>
<FONT color="green">276</FONT>          session.findObjectsFinal();<a name="line.276"></a>
<FONT color="green">277</FONT>    <a name="line.277"></a>
<FONT color="green">278</FONT>          if (foundPublicKeys.length != 1) {<a name="line.278"></a>
<FONT color="green">279</FONT>            output_.println("Error: Cannot find the public key under the given ID!");<a name="line.279"></a>
<FONT color="green">280</FONT>          } else {<a name="line.280"></a>
<FONT color="green">281</FONT>            output_.println("Found public key!");<a name="line.281"></a>
<FONT color="green">282</FONT>            output_.println("_______________________________________________________________________________");<a name="line.282"></a>
<FONT color="green">283</FONT>            output_.println(foundPublicKeys[0]);<a name="line.283"></a>
<FONT color="green">284</FONT>            output_.println("_______________________________________________________________________________");<a name="line.284"></a>
<FONT color="green">285</FONT>          }<a name="line.285"></a>
<FONT color="green">286</FONT>    <a name="line.286"></a>
<FONT color="green">287</FONT>          output_.println("################################################################################");<a name="line.287"></a>
<FONT color="green">288</FONT>    <a name="line.288"></a>
<FONT color="green">289</FONT>          session.closeSession();<a name="line.289"></a>
<FONT color="green">290</FONT>          pkcs11Module.finalize(null);<a name="line.290"></a>
<FONT color="green">291</FONT>    <a name="line.291"></a>
<FONT color="green">292</FONT>        } catch (Throwable thr) {<a name="line.292"></a>
<FONT color="green">293</FONT>          thr.printStackTrace();<a name="line.293"></a>
<FONT color="green">294</FONT>        }<a name="line.294"></a>
<FONT color="green">295</FONT>      }<a name="line.295"></a>
<FONT color="green">296</FONT>    <a name="line.296"></a>
<FONT color="green">297</FONT>      public static void printUsage() {<a name="line.297"></a>
<FONT color="green">298</FONT>        output_.println("Usage: GenerateKeyPair &lt;PKCS#11 module> &lt;X.509 encoded public key output file>");<a name="line.298"></a>
<FONT color="green">299</FONT>        output_.println(" e.g.: GenerateKeyPair pk2priv.dll publicKey.xpk");<a name="line.299"></a>
<FONT color="green">300</FONT>        output_.println("The given DLL must be in the search path of the system.");<a name="line.300"></a>
<FONT color="green">301</FONT>      }<a name="line.301"></a>
<FONT color="green">302</FONT>    <a name="line.302"></a>
<FONT color="green">303</FONT>    }<a name="line.303"></a>




























































</PRE>
</BODY>
</HTML>
