<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* Copyright  (c) 2002 Graz University of Technology. All rights reserved.<a name="line.1"></a>
<FONT color="green">002</FONT>     *<a name="line.2"></a>
<FONT color="green">003</FONT>     * Redistribution and use in  source and binary forms, with or without <a name="line.3"></a>
<FONT color="green">004</FONT>     * modification, are permitted  provided that the following conditions are met:<a name="line.4"></a>
<FONT color="green">005</FONT>     *<a name="line.5"></a>
<FONT color="green">006</FONT>     * 1. Redistributions of  source code must retain the above copyright notice,<a name="line.6"></a>
<FONT color="green">007</FONT>     *    this list of conditions and the following disclaimer.<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * 2. Redistributions in  binary form must reproduce the above copyright notice,<a name="line.9"></a>
<FONT color="green">010</FONT>     *    this list of conditions and the following disclaimer in the documentation<a name="line.10"></a>
<FONT color="green">011</FONT>     *    and/or other materials provided with the distribution.<a name="line.11"></a>
<FONT color="green">012</FONT>     *  <a name="line.12"></a>
<FONT color="green">013</FONT>     * 3. The end-user documentation included with the redistribution, if any, must<a name="line.13"></a>
<FONT color="green">014</FONT>     *    include the following acknowledgment:<a name="line.14"></a>
<FONT color="green">015</FONT>     * <a name="line.15"></a>
<FONT color="green">016</FONT>     *    "This product includes software developed by IAIK of Graz University of<a name="line.16"></a>
<FONT color="green">017</FONT>     *     Technology."<a name="line.17"></a>
<FONT color="green">018</FONT>     * <a name="line.18"></a>
<FONT color="green">019</FONT>     *    Alternately, this acknowledgment may appear in the software itself, if <a name="line.19"></a>
<FONT color="green">020</FONT>     *    and wherever such third-party acknowledgments normally appear.<a name="line.20"></a>
<FONT color="green">021</FONT>     *  <a name="line.21"></a>
<FONT color="green">022</FONT>     * 4. The names "Graz University of Technology" and "IAIK of Graz University of<a name="line.22"></a>
<FONT color="green">023</FONT>     *    Technology" must not be used to endorse or promote products derived from <a name="line.23"></a>
<FONT color="green">024</FONT>     *    this software without prior written permission.<a name="line.24"></a>
<FONT color="green">025</FONT>     *  <a name="line.25"></a>
<FONT color="green">026</FONT>     * 5. Products derived from this software may not be called <a name="line.26"></a>
<FONT color="green">027</FONT>     *    "IAIK PKCS Wrapper", nor may "IAIK" appear in their name, without prior <a name="line.27"></a>
<FONT color="green">028</FONT>     *    written permission of Graz University of Technology.<a name="line.28"></a>
<FONT color="green">029</FONT>     *  <a name="line.29"></a>
<FONT color="green">030</FONT>     *  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED<a name="line.30"></a>
<FONT color="green">031</FONT>     *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED<a name="line.31"></a>
<FONT color="green">032</FONT>     *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR<a name="line.32"></a>
<FONT color="green">033</FONT>     *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE LICENSOR BE<a name="line.33"></a>
<FONT color="green">034</FONT>     *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,<a name="line.34"></a>
<FONT color="green">035</FONT>     *  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,<a name="line.35"></a>
<FONT color="green">036</FONT>     *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,<a name="line.36"></a>
<FONT color="green">037</FONT>     *  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON<a name="line.37"></a>
<FONT color="green">038</FONT>     *  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,<a name="line.38"></a>
<FONT color="green">039</FONT>     *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY<a name="line.39"></a>
<FONT color="green">040</FONT>     *  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE<a name="line.40"></a>
<FONT color="green">041</FONT>     *  POSSIBILITY  OF SUCH DAMAGE.<a name="line.41"></a>
<FONT color="green">042</FONT>     */<a name="line.42"></a>
<FONT color="green">043</FONT>    <a name="line.43"></a>
<FONT color="green">044</FONT>    package demo.pkcs.pkcs11.wrapper;<a name="line.44"></a>
<FONT color="green">045</FONT>    <a name="line.45"></a>
<FONT color="green">046</FONT>    import java.io.File;<a name="line.46"></a>
<FONT color="green">047</FONT>    import java.io.FileInputStream;<a name="line.47"></a>
<FONT color="green">048</FONT>    import java.io.FileOutputStream;<a name="line.48"></a>
<FONT color="green">049</FONT>    import java.io.IOException;<a name="line.49"></a>
<FONT color="green">050</FONT>    import java.io.InputStream;<a name="line.50"></a>
<FONT color="green">051</FONT>    import java.security.MessageDigest;<a name="line.51"></a>
<FONT color="green">052</FONT>    import java.util.Arrays;<a name="line.52"></a>
<FONT color="green">053</FONT>    <a name="line.53"></a>
<FONT color="green">054</FONT>    import iaik.pkcs.pkcs11.wrapper.CK_ATTRIBUTE;<a name="line.54"></a>
<FONT color="green">055</FONT>    import iaik.pkcs.pkcs11.wrapper.CK_INFO;<a name="line.55"></a>
<FONT color="green">056</FONT>    import iaik.pkcs.pkcs11.wrapper.CK_MECHANISM;<a name="line.56"></a>
<FONT color="green">057</FONT>    import iaik.pkcs.pkcs11.wrapper.CK_MECHANISM_INFO;<a name="line.57"></a>
<FONT color="green">058</FONT>    import iaik.pkcs.pkcs11.wrapper.CK_SESSION_INFO;<a name="line.58"></a>
<FONT color="green">059</FONT>    import iaik.pkcs.pkcs11.wrapper.CK_SLOT_INFO;<a name="line.59"></a>
<FONT color="green">060</FONT>    import iaik.pkcs.pkcs11.wrapper.CK_TOKEN_INFO;<a name="line.60"></a>
<FONT color="green">061</FONT>    import iaik.pkcs.pkcs11.wrapper.Functions;<a name="line.61"></a>
<FONT color="green">062</FONT>    import iaik.pkcs.pkcs11.wrapper.PKCS11;<a name="line.62"></a>
<FONT color="green">063</FONT>    import iaik.pkcs.pkcs11.wrapper.PKCS11Connector;<a name="line.63"></a>
<FONT color="green">064</FONT>    import iaik.pkcs.pkcs11.wrapper.PKCS11Constants;<a name="line.64"></a>
<FONT color="green">065</FONT>    import iaik.pkcs.pkcs11.wrapper.PKCS11Exception;<a name="line.65"></a>
<FONT color="green">066</FONT>    <a name="line.66"></a>
<FONT color="green">067</FONT>    <a name="line.67"></a>
<FONT color="green">068</FONT>    <a name="line.68"></a>
<FONT color="green">069</FONT>    /**<a name="line.69"></a>
<FONT color="green">070</FONT>     * This is a simple class for testing the implementation.<a name="line.70"></a>
<FONT color="green">071</FONT>     * Notice that this is an sample that may not run as is with many tokens.<a name="line.71"></a>
<FONT color="green">072</FONT>     * It may be required to exclude some test methods in the main method.<a name="line.72"></a>
<FONT color="green">073</FONT>     */<a name="line.73"></a>
<FONT color="green">074</FONT>    public class SimpleTest {<a name="line.74"></a>
<FONT color="green">075</FONT>    <a name="line.75"></a>
<FONT color="green">076</FONT>      protected static final String CERTIFICATE_FILE = "tokenCertificate.der";<a name="line.76"></a>
<FONT color="green">077</FONT>    <a name="line.77"></a>
<FONT color="green">078</FONT>      protected static final String SIGNATURE_FILE = "signature.bin";<a name="line.78"></a>
<FONT color="green">079</FONT>    <a name="line.79"></a>
<FONT color="green">080</FONT>      protected static final String DIGEST_FILE = "digest.dat";<a name="line.80"></a>
<FONT color="green">081</FONT>    <a name="line.81"></a>
<FONT color="green">082</FONT>      protected PKCS11 myPKCS11Module_;<a name="line.82"></a>
<FONT color="green">083</FONT>    <a name="line.83"></a>
<FONT color="green">084</FONT>      protected String userPin_;<a name="line.84"></a>
<FONT color="green">085</FONT>    <a name="line.85"></a>
<FONT color="green">086</FONT>      protected long token_ = -1L;<a name="line.86"></a>
<FONT color="green">087</FONT>    <a name="line.87"></a>
<FONT color="green">088</FONT>      protected long session_;<a name="line.88"></a>
<FONT color="green">089</FONT>    <a name="line.89"></a>
<FONT color="green">090</FONT>      protected long[] objects_;<a name="line.90"></a>
<FONT color="green">091</FONT>    <a name="line.91"></a>
<FONT color="green">092</FONT>      protected long signatureKeyHandle_;<a name="line.92"></a>
<FONT color="green">093</FONT>    <a name="line.93"></a>
<FONT color="green">094</FONT>      protected long certificateHandle_;<a name="line.94"></a>
<FONT color="green">095</FONT>    <a name="line.95"></a>
<FONT color="green">096</FONT>      protected byte[] derEncodedCertificate_;<a name="line.96"></a>
<FONT color="green">097</FONT>    <a name="line.97"></a>
<FONT color="green">098</FONT>      protected File file_;<a name="line.98"></a>
<FONT color="green">099</FONT>    <a name="line.99"></a>
<FONT color="green">100</FONT>      protected CK_MECHANISM signatureMechanism_;<a name="line.100"></a>
<FONT color="green">101</FONT>    <a name="line.101"></a>
<FONT color="green">102</FONT>      protected CK_MECHANISM digestMechanism_;<a name="line.102"></a>
<FONT color="green">103</FONT>    <a name="line.103"></a>
<FONT color="green">104</FONT>      protected MessageDigest messageDigest_;<a name="line.104"></a>
<FONT color="green">105</FONT>    <a name="line.105"></a>
<FONT color="green">106</FONT>      protected byte[] signature_;<a name="line.106"></a>
<FONT color="green">107</FONT>    <a name="line.107"></a>
<FONT color="green">108</FONT>      protected byte[] digest_;<a name="line.108"></a>
<FONT color="green">109</FONT>    <a name="line.109"></a>
<FONT color="green">110</FONT>      public SimpleTest(String pkcs11Module, String userPin, File file)<a name="line.110"></a>
<FONT color="green">111</FONT>        throws IOException, PKCS11Exception<a name="line.111"></a>
<FONT color="green">112</FONT>      {<a name="line.112"></a>
<FONT color="green">113</FONT>        System.out.print("trying to connect to PKCS#11 module: " + pkcs11Module);<a name="line.113"></a>
<FONT color="green">114</FONT>        myPKCS11Module_ = PKCS11Connector.connectToPKCS11Module(pkcs11Module);<a name="line.114"></a>
<FONT color="green">115</FONT>        userPin_ = userPin;<a name="line.115"></a>
<FONT color="green">116</FONT>        file_ = file;<a name="line.116"></a>
<FONT color="green">117</FONT>        signatureMechanism_ = new CK_MECHANISM();<a name="line.117"></a>
<FONT color="green">118</FONT>        signatureMechanism_.mechanism = PKCS11Constants.CKM_SHA1_RSA_PKCS;<a name="line.118"></a>
<FONT color="green">119</FONT>        signatureMechanism_.pParameter = null;<a name="line.119"></a>
<FONT color="green">120</FONT>        digestMechanism_ = new CK_MECHANISM();<a name="line.120"></a>
<FONT color="green">121</FONT>        digestMechanism_.mechanism = PKCS11Constants.CKM_SHA_1;<a name="line.121"></a>
<FONT color="green">122</FONT>        digestMechanism_.pParameter = null;<a name="line.122"></a>
<FONT color="green">123</FONT>        System.out.println(" FINISHED");<a name="line.123"></a>
<FONT color="green">124</FONT>      }<a name="line.124"></a>
<FONT color="green">125</FONT>    <a name="line.125"></a>
<FONT color="green">126</FONT>      public static void main(String[] args) {<a name="line.126"></a>
<FONT color="green">127</FONT>        if (args.length != 3) {<a name="line.127"></a>
<FONT color="green">128</FONT>          printUsage();<a name="line.128"></a>
<FONT color="green">129</FONT>          System.exit(1);<a name="line.129"></a>
<FONT color="green">130</FONT>        }<a name="line.130"></a>
<FONT color="green">131</FONT>    <a name="line.131"></a>
<FONT color="green">132</FONT>        try {<a name="line.132"></a>
<FONT color="green">133</FONT>          SimpleTest test = new SimpleTest(args[0], args[1], new File(args[2]));<a name="line.133"></a>
<FONT color="green">134</FONT>    <a name="line.134"></a>
<FONT color="green">135</FONT>          test.initialize();<a name="line.135"></a>
<FONT color="green">136</FONT>          test.getInfo();<a name="line.136"></a>
<FONT color="green">137</FONT>          test.getSlotInfo();<a name="line.137"></a>
<FONT color="green">138</FONT>          test.getTokenInfo();<a name="line.138"></a>
<FONT color="green">139</FONT>          test.getMechanismInfo();<a name="line.139"></a>
<FONT color="green">140</FONT>          //test.initToken();<a name="line.140"></a>
<FONT color="green">141</FONT>          test.openROSession();<a name="line.141"></a>
<FONT color="green">142</FONT>          test.getSessionInfo();<a name="line.142"></a>
<FONT color="green">143</FONT>          test.findAllObjects();<a name="line.143"></a>
<FONT color="green">144</FONT>          test.printAllObjects();<a name="line.144"></a>
<FONT color="green">145</FONT>          test.loginUser();<a name="line.145"></a>
<FONT color="green">146</FONT>          test.getSessionInfo();<a name="line.146"></a>
<FONT color="green">147</FONT>          test.findAllObjects();<a name="line.147"></a>
<FONT color="green">148</FONT>          test.printAllObjects();<a name="line.148"></a>
<FONT color="green">149</FONT>          test.findSignatureKey();<a name="line.149"></a>
<FONT color="green">150</FONT>          test.findCertificate();<a name="line.150"></a>
<FONT color="green">151</FONT>          test.readCertificate();<a name="line.151"></a>
<FONT color="green">152</FONT>          test.writeCertificateToFile();<a name="line.152"></a>
<FONT color="green">153</FONT>          test.signData();<a name="line.153"></a>
<FONT color="green">154</FONT>          test.writeSignatureToFile();<a name="line.154"></a>
<FONT color="green">155</FONT>          test.digestData();<a name="line.155"></a>
<FONT color="green">156</FONT>          test.writeDigestToFile();<a name="line.156"></a>
<FONT color="green">157</FONT>          test.logout();<a name="line.157"></a>
<FONT color="green">158</FONT>          test.closeSession();<a name="line.158"></a>
<FONT color="green">159</FONT>    <a name="line.159"></a>
<FONT color="green">160</FONT>        } catch (Throwable thr) {<a name="line.160"></a>
<FONT color="green">161</FONT>          thr.printStackTrace();<a name="line.161"></a>
<FONT color="green">162</FONT>        }<a name="line.162"></a>
<FONT color="green">163</FONT>      }<a name="line.163"></a>
<FONT color="green">164</FONT>    <a name="line.164"></a>
<FONT color="green">165</FONT>      public static void printUsage() {<a name="line.165"></a>
<FONT color="green">166</FONT>        System.out.println("Usage: SimepleTest &lt;PKCS#11 module> &lt;userPIN> &lt;file to be signed>");<a name="line.166"></a>
<FONT color="green">167</FONT>        System.out.println(" e.g.: SimpleTest pk2priv.dll password data.dat");<a name="line.167"></a>
<FONT color="green">168</FONT>        System.out.println("The given DLL must be in the search path of the system.");<a name="line.168"></a>
<FONT color="green">169</FONT>      }<a name="line.169"></a>
<FONT color="green">170</FONT>    <a name="line.170"></a>
<FONT color="green">171</FONT>      public void initialize()<a name="line.171"></a>
<FONT color="green">172</FONT>          throws PKCS11Exception<a name="line.172"></a>
<FONT color="green">173</FONT>      {<a name="line.173"></a>
<FONT color="green">174</FONT>        System.out.print("initializing... ");<a name="line.174"></a>
<FONT color="green">175</FONT>        myPKCS11Module_.C_Initialize(null);<a name="line.175"></a>
<FONT color="green">176</FONT>        System.out.println("FINISHED\n");<a name="line.176"></a>
<FONT color="green">177</FONT>      }<a name="line.177"></a>
<FONT color="green">178</FONT>    <a name="line.178"></a>
<FONT color="green">179</FONT>      public void getInfo()<a name="line.179"></a>
<FONT color="green">180</FONT>          throws PKCS11Exception<a name="line.180"></a>
<FONT color="green">181</FONT>      {<a name="line.181"></a>
<FONT color="green">182</FONT>        System.out.println("getting info");<a name="line.182"></a>
<FONT color="green">183</FONT>        CK_INFO moduleInfo = myPKCS11Module_.C_GetInfo();<a name="line.183"></a>
<FONT color="green">184</FONT>        System.out.println("Module Info: ");<a name="line.184"></a>
<FONT color="green">185</FONT>        System.out.println(moduleInfo);<a name="line.185"></a>
<FONT color="green">186</FONT>        System.out.println("FINISHED\n");<a name="line.186"></a>
<FONT color="green">187</FONT>      }<a name="line.187"></a>
<FONT color="green">188</FONT>    <a name="line.188"></a>
<FONT color="green">189</FONT>      public void getSlotInfo()<a name="line.189"></a>
<FONT color="green">190</FONT>          throws PKCS11Exception<a name="line.190"></a>
<FONT color="green">191</FONT>      {<a name="line.191"></a>
<FONT color="green">192</FONT>        System.out.println("getting slot list");<a name="line.192"></a>
<FONT color="green">193</FONT>        long[] slotIDs = myPKCS11Module_.C_GetSlotList(false);<a name="line.193"></a>
<FONT color="green">194</FONT>        CK_SLOT_INFO slotInfo;<a name="line.194"></a>
<FONT color="green">195</FONT>        for (int i=0; i &lt; slotIDs.length; i++) {<a name="line.195"></a>
<FONT color="green">196</FONT>          System.out.println("Slot Info: ");<a name="line.196"></a>
<FONT color="green">197</FONT>          slotInfo = myPKCS11Module_.C_GetSlotInfo(slotIDs[i]);<a name="line.197"></a>
<FONT color="green">198</FONT>          System.out.println(slotInfo);<a name="line.198"></a>
<FONT color="green">199</FONT>        }<a name="line.199"></a>
<FONT color="green">200</FONT>        System.out.println("FINISHED\n");<a name="line.200"></a>
<FONT color="green">201</FONT>      }<a name="line.201"></a>
<FONT color="green">202</FONT>    <a name="line.202"></a>
<FONT color="green">203</FONT>      public void getTokenInfo()<a name="line.203"></a>
<FONT color="green">204</FONT>          throws PKCS11Exception<a name="line.204"></a>
<FONT color="green">205</FONT>      {<a name="line.205"></a>
<FONT color="green">206</FONT>        System.out.println("getting token list");<a name="line.206"></a>
<FONT color="green">207</FONT>        long[] tokenIDs = myPKCS11Module_.C_GetSlotList(true);<a name="line.207"></a>
<FONT color="green">208</FONT>        CK_TOKEN_INFO tokenInfo;<a name="line.208"></a>
<FONT color="green">209</FONT>        for (int i=0; i &lt; tokenIDs.length; i++) {<a name="line.209"></a>
<FONT color="green">210</FONT>          System.out.println("Token Info: ");<a name="line.210"></a>
<FONT color="green">211</FONT>          tokenInfo = myPKCS11Module_.C_GetTokenInfo(tokenIDs[i]);<a name="line.211"></a>
<FONT color="green">212</FONT>          System.out.println(tokenInfo);<a name="line.212"></a>
<FONT color="green">213</FONT>          if (token_ == -1L) {<a name="line.213"></a>
<FONT color="green">214</FONT>            token_ = tokenIDs[i];<a name="line.214"></a>
<FONT color="green">215</FONT>          }<a name="line.215"></a>
<FONT color="green">216</FONT>        }<a name="line.216"></a>
<FONT color="green">217</FONT>        System.out.println("FINISHED\n");<a name="line.217"></a>
<FONT color="green">218</FONT>      }<a name="line.218"></a>
<FONT color="green">219</FONT>    <a name="line.219"></a>
<FONT color="green">220</FONT>      public void getMechanismInfo()<a name="line.220"></a>
<FONT color="green">221</FONT>          throws PKCS11Exception<a name="line.221"></a>
<FONT color="green">222</FONT>      {<a name="line.222"></a>
<FONT color="green">223</FONT>        CK_MECHANISM_INFO mechanismInfo;<a name="line.223"></a>
<FONT color="green">224</FONT>    <a name="line.224"></a>
<FONT color="green">225</FONT>        System.out.println("getting mechanism list");<a name="line.225"></a>
<FONT color="green">226</FONT>        System.out.println("getting slot list");<a name="line.226"></a>
<FONT color="green">227</FONT>        long[] slotIDs = myPKCS11Module_.C_GetSlotList(true);<a name="line.227"></a>
<FONT color="green">228</FONT>        for (int i=0; i &lt; slotIDs.length; i++) {<a name="line.228"></a>
<FONT color="green">229</FONT>          System.out.println("getting mechanism list for slot " + slotIDs[i]);<a name="line.229"></a>
<FONT color="green">230</FONT>          long[] mechanismIDs = myPKCS11Module_.C_GetMechanismList(slotIDs[i]);<a name="line.230"></a>
<FONT color="green">231</FONT>          for (int j=0; j &lt; mechanismIDs.length; j++) {<a name="line.231"></a>
<FONT color="green">232</FONT>            System.out.println("mechanism info for mechanism " + Functions.mechanismCodeToString(mechanismIDs[j]) +<a name="line.232"></a>
<FONT color="green">233</FONT>             ": ");<a name="line.233"></a>
<FONT color="green">234</FONT>            mechanismInfo = myPKCS11Module_.C_GetMechanismInfo(slotIDs[i],<a name="line.234"></a>
<FONT color="green">235</FONT>                     mechanismIDs[j]);<a name="line.235"></a>
<FONT color="green">236</FONT>            System.out.println(mechanismInfo);<a name="line.236"></a>
<FONT color="green">237</FONT>          }<a name="line.237"></a>
<FONT color="green">238</FONT>        }<a name="line.238"></a>
<FONT color="green">239</FONT>        System.out.println("FINISHED\n");<a name="line.239"></a>
<FONT color="green">240</FONT>      }<a name="line.240"></a>
<FONT color="green">241</FONT>    <a name="line.241"></a>
<FONT color="green">242</FONT>      public void initToken()<a name="line.242"></a>
<FONT color="green">243</FONT>          throws PKCS11Exception<a name="line.243"></a>
<FONT color="green">244</FONT>      {<a name="line.244"></a>
<FONT color="green">245</FONT>        String label = "The Label!                      ";<a name="line.245"></a>
<FONT color="green">246</FONT>        String pin = "password";<a name="line.246"></a>
<FONT color="green">247</FONT>    <a name="line.247"></a>
<FONT color="green">248</FONT>        System.out.println("init token");<a name="line.248"></a>
<FONT color="green">249</FONT>        long[] slotIDs = myPKCS11Module_.C_GetSlotList(false);<a name="line.249"></a>
<FONT color="green">250</FONT>        myPKCS11Module_.C_InitToken(slotIDs[0], pin.toCharArray(), label.toCharArray());<a name="line.250"></a>
<FONT color="green">251</FONT>        System.out.println("FINISHED");<a name="line.251"></a>
<FONT color="green">252</FONT>      }<a name="line.252"></a>
<FONT color="green">253</FONT>    <a name="line.253"></a>
<FONT color="green">254</FONT>      public void openROSession()<a name="line.254"></a>
<FONT color="green">255</FONT>          throws PKCS11Exception<a name="line.255"></a>
<FONT color="green">256</FONT>      {<a name="line.256"></a>
<FONT color="green">257</FONT>        System.out.println("open RO session");<a name="line.257"></a>
<FONT color="green">258</FONT>        session_ = myPKCS11Module_.C_OpenSession(token_, PKCS11Constants.CKF_SERIAL_SESSION, null, null);<a name="line.258"></a>
<FONT color="green">259</FONT>        System.out.println("FINISHED\n");<a name="line.259"></a>
<FONT color="green">260</FONT>      }<a name="line.260"></a>
<FONT color="green">261</FONT>    <a name="line.261"></a>
<FONT color="green">262</FONT>      public void getSessionInfo()<a name="line.262"></a>
<FONT color="green">263</FONT>          throws PKCS11Exception<a name="line.263"></a>
<FONT color="green">264</FONT>      {<a name="line.264"></a>
<FONT color="green">265</FONT>        System.out.println("get session info");<a name="line.265"></a>
<FONT color="green">266</FONT>        CK_SESSION_INFO sessionInfo;<a name="line.266"></a>
<FONT color="green">267</FONT>        System.out.println("Session Info: ");<a name="line.267"></a>
<FONT color="green">268</FONT>        sessionInfo = myPKCS11Module_.C_GetSessionInfo(session_);<a name="line.268"></a>
<FONT color="green">269</FONT>        System.out.println(sessionInfo);<a name="line.269"></a>
<FONT color="green">270</FONT>        System.out.println("FINISHED\n");<a name="line.270"></a>
<FONT color="green">271</FONT>      }<a name="line.271"></a>
<FONT color="green">272</FONT>    <a name="line.272"></a>
<FONT color="green">273</FONT>      public void findAllObjects()<a name="line.273"></a>
<FONT color="green">274</FONT>          throws PKCS11Exception<a name="line.274"></a>
<FONT color="green">275</FONT>      {<a name="line.275"></a>
<FONT color="green">276</FONT>        System.out.println("find all objects");<a name="line.276"></a>
<FONT color="green">277</FONT>        myPKCS11Module_.C_FindObjectsInit(session_, null);<a name="line.277"></a>
<FONT color="green">278</FONT>        objects_ = myPKCS11Module_.C_FindObjects(session_, 100); //maximum of 100 at once<a name="line.278"></a>
<FONT color="green">279</FONT>        if (objects_ == null) {<a name="line.279"></a>
<FONT color="green">280</FONT>          System.out.println("null returned - no objects found");<a name="line.280"></a>
<FONT color="green">281</FONT>        } else {<a name="line.281"></a>
<FONT color="green">282</FONT>          System.out.println("found " + objects_.length + " objects");<a name="line.282"></a>
<FONT color="green">283</FONT>        }<a name="line.283"></a>
<FONT color="green">284</FONT>        myPKCS11Module_.C_FindObjectsFinal(session_);<a name="line.284"></a>
<FONT color="green">285</FONT>        System.out.println("FINISHED\n");<a name="line.285"></a>
<FONT color="green">286</FONT>      }<a name="line.286"></a>
<FONT color="green">287</FONT>    <a name="line.287"></a>
<FONT color="green">288</FONT>      public void printAllObjects()<a name="line.288"></a>
<FONT color="green">289</FONT>          throws PKCS11Exception<a name="line.289"></a>
<FONT color="green">290</FONT>      {<a name="line.290"></a>
<FONT color="green">291</FONT>        System.out.println("print all objects");<a name="line.291"></a>
<FONT color="green">292</FONT>    <a name="line.292"></a>
<FONT color="green">293</FONT>        for (int i = 0; i &lt; objects_.length; i++) {<a name="line.293"></a>
<FONT color="green">294</FONT>          System.out.println("object No. " + i);<a name="line.294"></a>
<FONT color="green">295</FONT>          CK_ATTRIBUTE[] template = new CK_ATTRIBUTE[1];<a name="line.295"></a>
<FONT color="green">296</FONT>          template[0] = new CK_ATTRIBUTE();<a name="line.296"></a>
<FONT color="green">297</FONT>          template[0].type = PKCS11Constants.CKA_CLASS;<a name="line.297"></a>
<FONT color="green">298</FONT>          myPKCS11Module_.C_GetAttributeValue(session_, objects_[i], template);<a name="line.298"></a>
<FONT color="green">299</FONT>          System.out.println("CKA_CLASS: " + Functions.classTypeToString(((Long) template[0].pValue).longValue()));<a name="line.299"></a>
<FONT color="green">300</FONT>        }<a name="line.300"></a>
<FONT color="green">301</FONT>    <a name="line.301"></a>
<FONT color="green">302</FONT>        System.out.println("FINISHED\n");<a name="line.302"></a>
<FONT color="green">303</FONT>      }<a name="line.303"></a>
<FONT color="green">304</FONT>    <a name="line.304"></a>
<FONT color="green">305</FONT>      public void loginUser()<a name="line.305"></a>
<FONT color="green">306</FONT>          throws PKCS11Exception<a name="line.306"></a>
<FONT color="green">307</FONT>      {<a name="line.307"></a>
<FONT color="green">308</FONT>        System.out.println("login user to session with password \"" + userPin_ + "\"");<a name="line.308"></a>
<FONT color="green">309</FONT>        myPKCS11Module_.C_Login(session_, PKCS11Constants.CKU_USER, userPin_.toCharArray());<a name="line.309"></a>
<FONT color="green">310</FONT>        System.out.println("FINISHED\n");<a name="line.310"></a>
<FONT color="green">311</FONT>      }<a name="line.311"></a>
<FONT color="green">312</FONT>    <a name="line.312"></a>
<FONT color="green">313</FONT>      public void findSignatureKey()<a name="line.313"></a>
<FONT color="green">314</FONT>          throws PKCS11Exception<a name="line.314"></a>
<FONT color="green">315</FONT>      {<a name="line.315"></a>
<FONT color="green">316</FONT>        System.out.println("find signature key");<a name="line.316"></a>
<FONT color="green">317</FONT>        CK_ATTRIBUTE[] attributeTemplateList = new CK_ATTRIBUTE[2];<a name="line.317"></a>
<FONT color="green">318</FONT>    <a name="line.318"></a>
<FONT color="green">319</FONT>        attributeTemplateList[0] = new CK_ATTRIBUTE();<a name="line.319"></a>
<FONT color="green">320</FONT>        attributeTemplateList[0].type = PKCS11Constants.CKA_CLASS;<a name="line.320"></a>
<FONT color="green">321</FONT>        attributeTemplateList[0].pValue = new Long(PKCS11Constants.CKO_PRIVATE_KEY);<a name="line.321"></a>
<FONT color="green">322</FONT>        attributeTemplateList[1] = new CK_ATTRIBUTE();<a name="line.322"></a>
<FONT color="green">323</FONT>        attributeTemplateList[1].type = PKCS11Constants.CKA_SIGN;<a name="line.323"></a>
<FONT color="green">324</FONT>        attributeTemplateList[1].pValue = new Boolean(PKCS11Constants.TRUE);<a name="line.324"></a>
<FONT color="green">325</FONT>    <a name="line.325"></a>
<FONT color="green">326</FONT>        myPKCS11Module_.C_FindObjectsInit(session_, attributeTemplateList);<a name="line.326"></a>
<FONT color="green">327</FONT>        long[] availableSignatureKeys = myPKCS11Module_.C_FindObjects(session_, 100); //maximum of 100 at once<a name="line.327"></a>
<FONT color="green">328</FONT>        if (availableSignatureKeys == null) {<a name="line.328"></a>
<FONT color="green">329</FONT>          System.out.println("null returned - no signature key found");<a name="line.329"></a>
<FONT color="green">330</FONT>        } else {<a name="line.330"></a>
<FONT color="green">331</FONT>          System.out.println("found " + availableSignatureKeys.length + " signature keys");<a name="line.331"></a>
<FONT color="green">332</FONT>          for (int i=0; i &lt; availableSignatureKeys.length; i++) {<a name="line.332"></a>
<FONT color="green">333</FONT>            if (i == 0) { // the first we find, we take as our signature key<a name="line.333"></a>
<FONT color="green">334</FONT>              signatureKeyHandle_ = availableSignatureKeys[i];<a name="line.334"></a>
<FONT color="green">335</FONT>              System.out.print("for signing we use ");<a name="line.335"></a>
<FONT color="green">336</FONT>            }<a name="line.336"></a>
<FONT color="green">337</FONT>            System.out.println("signature key " + i);<a name="line.337"></a>
<FONT color="green">338</FONT>          }<a name="line.338"></a>
<FONT color="green">339</FONT>        }<a name="line.339"></a>
<FONT color="green">340</FONT>        myPKCS11Module_.C_FindObjectsFinal(session_);<a name="line.340"></a>
<FONT color="green">341</FONT>        System.out.println("FINISHED\n");<a name="line.341"></a>
<FONT color="green">342</FONT>      }<a name="line.342"></a>
<FONT color="green">343</FONT>    <a name="line.343"></a>
<FONT color="green">344</FONT>      public void findCertificate()<a name="line.344"></a>
<FONT color="green">345</FONT>          throws PKCS11Exception<a name="line.345"></a>
<FONT color="green">346</FONT>      {<a name="line.346"></a>
<FONT color="green">347</FONT>        System.out.println("find certificate");<a name="line.347"></a>
<FONT color="green">348</FONT>    <a name="line.348"></a>
<FONT color="green">349</FONT>        // first get the ID of the signature key<a name="line.349"></a>
<FONT color="green">350</FONT>        CK_ATTRIBUTE[] attributeTemplateList = new CK_ATTRIBUTE[1];<a name="line.350"></a>
<FONT color="green">351</FONT>        attributeTemplateList[0] = new CK_ATTRIBUTE();<a name="line.351"></a>
<FONT color="green">352</FONT>        attributeTemplateList[0].type = PKCS11Constants.CKA_ID;<a name="line.352"></a>
<FONT color="green">353</FONT>    <a name="line.353"></a>
<FONT color="green">354</FONT>        myPKCS11Module_.C_GetAttributeValue(session_, signatureKeyHandle_ , attributeTemplateList);<a name="line.354"></a>
<FONT color="green">355</FONT>        byte[] keyAndCertificateID = (byte[]) attributeTemplateList[0].pValue;<a name="line.355"></a>
<FONT color="green">356</FONT>        System.out.println("ID of siganture key: " + Functions.toHexString(keyAndCertificateID));<a name="line.356"></a>
<FONT color="green">357</FONT>    <a name="line.357"></a>
<FONT color="green">358</FONT>        // now get the certificate with the same ID as the signature key<a name="line.358"></a>
<FONT color="green">359</FONT>        attributeTemplateList = new CK_ATTRIBUTE[2];<a name="line.359"></a>
<FONT color="green">360</FONT>    <a name="line.360"></a>
<FONT color="green">361</FONT>        attributeTemplateList[0] = new CK_ATTRIBUTE();<a name="line.361"></a>
<FONT color="green">362</FONT>        attributeTemplateList[0].type = PKCS11Constants.CKA_CLASS;<a name="line.362"></a>
<FONT color="green">363</FONT>        attributeTemplateList[0].pValue = new Long(PKCS11Constants.CKO_CERTIFICATE);<a name="line.363"></a>
<FONT color="green">364</FONT>        attributeTemplateList[1] = new CK_ATTRIBUTE();<a name="line.364"></a>
<FONT color="green">365</FONT>        attributeTemplateList[1].type = PKCS11Constants.CKA_ID;<a name="line.365"></a>
<FONT color="green">366</FONT>        attributeTemplateList[1].pValue = keyAndCertificateID;<a name="line.366"></a>
<FONT color="green">367</FONT>    <a name="line.367"></a>
<FONT color="green">368</FONT>        myPKCS11Module_.C_FindObjectsInit(session_, attributeTemplateList);<a name="line.368"></a>
<FONT color="green">369</FONT>        long[] availableCertificates = myPKCS11Module_.C_FindObjects(session_, 100); //maximum of 100 at once<a name="line.369"></a>
<FONT color="green">370</FONT>        if (availableCertificates == null) {<a name="line.370"></a>
<FONT color="green">371</FONT>          System.out.println("null returned - no certificate found");<a name="line.371"></a>
<FONT color="green">372</FONT>        } else {<a name="line.372"></a>
<FONT color="green">373</FONT>          System.out.println("found " + availableCertificates.length + " certificates with matching ID");<a name="line.373"></a>
<FONT color="green">374</FONT>          for (int i=0; i &lt; availableCertificates.length; i++) {<a name="line.374"></a>
<FONT color="green">375</FONT>            if (i == 0) { // the first we find, we take as our certificate<a name="line.375"></a>
<FONT color="green">376</FONT>              certificateHandle_ = availableCertificates[i];<a name="line.376"></a>
<FONT color="green">377</FONT>              System.out.print("for verification we use ");<a name="line.377"></a>
<FONT color="green">378</FONT>            }<a name="line.378"></a>
<FONT color="green">379</FONT>            System.out.println("certificate " + i);<a name="line.379"></a>
<FONT color="green">380</FONT>          }<a name="line.380"></a>
<FONT color="green">381</FONT>        }<a name="line.381"></a>
<FONT color="green">382</FONT>        myPKCS11Module_.C_FindObjectsFinal(session_);<a name="line.382"></a>
<FONT color="green">383</FONT>        System.out.println("FINISHED\n");<a name="line.383"></a>
<FONT color="green">384</FONT>      }<a name="line.384"></a>
<FONT color="green">385</FONT>    <a name="line.385"></a>
<FONT color="green">386</FONT>      public void readCertificate()<a name="line.386"></a>
<FONT color="green">387</FONT>          throws PKCS11Exception<a name="line.387"></a>
<FONT color="green">388</FONT>      {<a name="line.388"></a>
<FONT color="green">389</FONT>        System.out.println("read certificate");<a name="line.389"></a>
<FONT color="green">390</FONT>    <a name="line.390"></a>
<FONT color="green">391</FONT>        CK_ATTRIBUTE[] template = new CK_ATTRIBUTE[1];<a name="line.391"></a>
<FONT color="green">392</FONT>        template[0] = new CK_ATTRIBUTE();<a name="line.392"></a>
<FONT color="green">393</FONT>        template[0].type = PKCS11Constants.CKA_VALUE;<a name="line.393"></a>
<FONT color="green">394</FONT>        myPKCS11Module_.C_GetAttributeValue(session_, certificateHandle_ , template);<a name="line.394"></a>
<FONT color="green">395</FONT>        derEncodedCertificate_ = (byte[]) template[0].pValue;<a name="line.395"></a>
<FONT color="green">396</FONT>        System.out.println("DER encoded certificate (" + derEncodedCertificate_.length + " bytes):");<a name="line.396"></a>
<FONT color="green">397</FONT>        System.out.println(Functions.toHexString(derEncodedCertificate_));<a name="line.397"></a>
<FONT color="green">398</FONT>    <a name="line.398"></a>
<FONT color="green">399</FONT>        System.out.println("FINISHED\n");<a name="line.399"></a>
<FONT color="green">400</FONT>      }<a name="line.400"></a>
<FONT color="green">401</FONT>    <a name="line.401"></a>
<FONT color="green">402</FONT>      public void writeCertificateToFile()<a name="line.402"></a>
<FONT color="green">403</FONT>          throws IOException, PKCS11Exception<a name="line.403"></a>
<FONT color="green">404</FONT>      {<a name="line.404"></a>
<FONT color="green">405</FONT>        System.out.println("write certificate to file: " + CERTIFICATE_FILE);<a name="line.405"></a>
<FONT color="green">406</FONT>    <a name="line.406"></a>
<FONT color="green">407</FONT>        FileOutputStream fos = new FileOutputStream(CERTIFICATE_FILE);<a name="line.407"></a>
<FONT color="green">408</FONT>        fos.write(derEncodedCertificate_);<a name="line.408"></a>
<FONT color="green">409</FONT>        fos.flush();<a name="line.409"></a>
<FONT color="green">410</FONT>        fos.close();<a name="line.410"></a>
<FONT color="green">411</FONT>    <a name="line.411"></a>
<FONT color="green">412</FONT>        System.out.println("FINISHED\n");<a name="line.412"></a>
<FONT color="green">413</FONT>      }<a name="line.413"></a>
<FONT color="green">414</FONT>    <a name="line.414"></a>
<FONT color="green">415</FONT>      public void signData()<a name="line.415"></a>
<FONT color="green">416</FONT>          throws IOException, PKCS11Exception<a name="line.416"></a>
<FONT color="green">417</FONT>      {<a name="line.417"></a>
<FONT color="green">418</FONT>        byte[] buffer = new byte[1024];<a name="line.418"></a>
<FONT color="green">419</FONT>        byte[] helpBuffer;<a name="line.419"></a>
<FONT color="green">420</FONT>        int bytesRead;<a name="line.420"></a>
<FONT color="green">421</FONT>    <a name="line.421"></a>
<FONT color="green">422</FONT>        InputStream dataInput = new FileInputStream(file_);<a name="line.422"></a>
<FONT color="green">423</FONT>        myPKCS11Module_.C_SignInit(session_, signatureMechanism_, signatureKeyHandle_);<a name="line.423"></a>
<FONT color="green">424</FONT>        while ((bytesRead = dataInput.read(buffer, 0, buffer.length)) >= 0) {<a name="line.424"></a>
<FONT color="green">425</FONT>          helpBuffer = new byte[bytesRead]; // we need a buffer that only holds what to send for signing<a name="line.425"></a>
<FONT color="green">426</FONT>          System.arraycopy(buffer, 0, helpBuffer, 0, bytesRead);<a name="line.426"></a>
<FONT color="green">427</FONT>          myPKCS11Module_.C_SignUpdate(session_, helpBuffer);<a name="line.427"></a>
<FONT color="green">428</FONT>          Arrays.fill(helpBuffer, (byte) 0);<a name="line.428"></a>
<FONT color="green">429</FONT>        }<a name="line.429"></a>
<FONT color="green">430</FONT>        Arrays.fill(buffer, (byte) 0);<a name="line.430"></a>
<FONT color="green">431</FONT>        signature_ = myPKCS11Module_.C_SignFinal(session_);<a name="line.431"></a>
<FONT color="green">432</FONT>      }<a name="line.432"></a>
<FONT color="green">433</FONT>    <a name="line.433"></a>
<FONT color="green">434</FONT>      public void writeSignatureToFile()<a name="line.434"></a>
<FONT color="green">435</FONT>          throws IOException, PKCS11Exception<a name="line.435"></a>
<FONT color="green">436</FONT>      {<a name="line.436"></a>
<FONT color="green">437</FONT>        System.out.println("write signature to file: " + SIGNATURE_FILE);<a name="line.437"></a>
<FONT color="green">438</FONT>    <a name="line.438"></a>
<FONT color="green">439</FONT>        FileOutputStream fos = new FileOutputStream(SIGNATURE_FILE);<a name="line.439"></a>
<FONT color="green">440</FONT>        fos.write(signature_);<a name="line.440"></a>
<FONT color="green">441</FONT>        fos.flush();<a name="line.441"></a>
<FONT color="green">442</FONT>        fos.close();<a name="line.442"></a>
<FONT color="green">443</FONT>    <a name="line.443"></a>
<FONT color="green">444</FONT>        System.out.println("FINISHED");<a name="line.444"></a>
<FONT color="green">445</FONT>      }<a name="line.445"></a>
<FONT color="green">446</FONT>    <a name="line.446"></a>
<FONT color="green">447</FONT>      public void digestData()<a name="line.447"></a>
<FONT color="green">448</FONT>          throws IOException, PKCS11Exception<a name="line.448"></a>
<FONT color="green">449</FONT>      {<a name="line.449"></a>
<FONT color="green">450</FONT>        byte[] buffer = new byte[1024];<a name="line.450"></a>
<FONT color="green">451</FONT>        byte[] helpBuffer, testDigest;<a name="line.451"></a>
<FONT color="green">452</FONT>        int bytesRead;<a name="line.452"></a>
<FONT color="green">453</FONT>    <a name="line.453"></a>
<FONT color="green">454</FONT>        System.out.println("Digest Data");<a name="line.454"></a>
<FONT color="green">455</FONT>        myPKCS11Module_.C_DigestInit(session_, digestMechanism_);<a name="line.455"></a>
<FONT color="green">456</FONT>        try { <a name="line.456"></a>
<FONT color="green">457</FONT>          messageDigest_ = MessageDigest.getInstance("SHA-1"); <a name="line.457"></a>
<FONT color="green">458</FONT>        } catch (Exception e) { <a name="line.458"></a>
<FONT color="green">459</FONT>          System.out.println(e); <a name="line.459"></a>
<FONT color="green">460</FONT>        }<a name="line.460"></a>
<FONT color="green">461</FONT>        InputStream dataInput = new FileInputStream(file_);<a name="line.461"></a>
<FONT color="green">462</FONT>       while ((bytesRead = dataInput.read(buffer, 0, buffer.length)) >= 0) {<a name="line.462"></a>
<FONT color="green">463</FONT>          helpBuffer = new byte[bytesRead]; // we need a buffer that only holds what to send for digesting<a name="line.463"></a>
<FONT color="green">464</FONT>          System.arraycopy(buffer, 0, helpBuffer, 0, bytesRead);<a name="line.464"></a>
<FONT color="green">465</FONT>          myPKCS11Module_.C_DigestUpdate(session_, helpBuffer);<a name="line.465"></a>
<FONT color="green">466</FONT>          messageDigest_.update(helpBuffer);<a name="line.466"></a>
<FONT color="green">467</FONT>          Arrays.fill(helpBuffer, (byte) 0);<a name="line.467"></a>
<FONT color="green">468</FONT>        }<a name="line.468"></a>
<FONT color="green">469</FONT>        Arrays.fill(buffer, (byte) 0);<a name="line.469"></a>
<FONT color="green">470</FONT>        digest_ = myPKCS11Module_.C_DigestFinal(session_);<a name="line.470"></a>
<FONT color="green">471</FONT>        testDigest = messageDigest_.digest();<a name="line.471"></a>
<FONT color="green">472</FONT>        System.out.println("PKCS11digest:"+Functions.toHexString(digest_));<a name="line.472"></a>
<FONT color="green">473</FONT>        System.out.println("TestDigest  :"+Functions.toHexString(testDigest));<a name="line.473"></a>
<FONT color="green">474</FONT>        System.out.println("FINISHED\n");<a name="line.474"></a>
<FONT color="green">475</FONT>      }<a name="line.475"></a>
<FONT color="green">476</FONT>    <a name="line.476"></a>
<FONT color="green">477</FONT>      public void writeDigestToFile()<a name="line.477"></a>
<FONT color="green">478</FONT>          throws IOException, PKCS11Exception<a name="line.478"></a>
<FONT color="green">479</FONT>      {<a name="line.479"></a>
<FONT color="green">480</FONT>        System.out.println("write digest to file: " + DIGEST_FILE);<a name="line.480"></a>
<FONT color="green">481</FONT>    <a name="line.481"></a>
<FONT color="green">482</FONT>        FileOutputStream fos = new FileOutputStream(DIGEST_FILE);<a name="line.482"></a>
<FONT color="green">483</FONT>        fos.write(digest_);<a name="line.483"></a>
<FONT color="green">484</FONT>        fos.flush();<a name="line.484"></a>
<FONT color="green">485</FONT>        fos.close();<a name="line.485"></a>
<FONT color="green">486</FONT>    <a name="line.486"></a>
<FONT color="green">487</FONT>        System.out.println("FINISHED\n");<a name="line.487"></a>
<FONT color="green">488</FONT>      }<a name="line.488"></a>
<FONT color="green">489</FONT>    <a name="line.489"></a>
<FONT color="green">490</FONT>      public void logout()<a name="line.490"></a>
<FONT color="green">491</FONT>          throws PKCS11Exception<a name="line.491"></a>
<FONT color="green">492</FONT>      {<a name="line.492"></a>
<FONT color="green">493</FONT>        System.out.println("logout session");<a name="line.493"></a>
<FONT color="green">494</FONT>        myPKCS11Module_.C_Logout(session_);<a name="line.494"></a>
<FONT color="green">495</FONT>        System.out.println("FINISHED\n");<a name="line.495"></a>
<FONT color="green">496</FONT>      }<a name="line.496"></a>
<FONT color="green">497</FONT>    <a name="line.497"></a>
<FONT color="green">498</FONT>      public void closeSession()<a name="line.498"></a>
<FONT color="green">499</FONT>          throws PKCS11Exception<a name="line.499"></a>
<FONT color="green">500</FONT>      {<a name="line.500"></a>
<FONT color="green">501</FONT>        System.out.println("close session");<a name="line.501"></a>
<FONT color="green">502</FONT>        myPKCS11Module_.C_CloseSession(session_);<a name="line.502"></a>
<FONT color="green">503</FONT>        System.out.println("FINISHED\n");<a name="line.503"></a>
<FONT color="green">504</FONT>      }<a name="line.504"></a>
<FONT color="green">505</FONT>    <a name="line.505"></a>
<FONT color="green">506</FONT>    <a name="line.506"></a>
<FONT color="green">507</FONT>    }<a name="line.507"></a>




























































</PRE>
</BODY>
</HTML>
