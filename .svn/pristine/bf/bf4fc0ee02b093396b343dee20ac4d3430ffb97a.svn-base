<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* Copyright  (c) 2002 Graz University of Technology. All rights reserved.<a name="line.1"></a>
<FONT color="green">002</FONT>     *<a name="line.2"></a>
<FONT color="green">003</FONT>     * Redistribution and use in  source and binary forms, with or without <a name="line.3"></a>
<FONT color="green">004</FONT>     * modification, are permitted  provided that the following conditions are met:<a name="line.4"></a>
<FONT color="green">005</FONT>     *<a name="line.5"></a>
<FONT color="green">006</FONT>     * 1. Redistributions of  source code must retain the above copyright notice,<a name="line.6"></a>
<FONT color="green">007</FONT>     *    this list of conditions and the following disclaimer.<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * 2. Redistributions in  binary form must reproduce the above copyright notice,<a name="line.9"></a>
<FONT color="green">010</FONT>     *    this list of conditions and the following disclaimer in the documentation<a name="line.10"></a>
<FONT color="green">011</FONT>     *    and/or other materials provided with the distribution.<a name="line.11"></a>
<FONT color="green">012</FONT>     *  <a name="line.12"></a>
<FONT color="green">013</FONT>     * 3. The end-user documentation included with the redistribution, if any, must<a name="line.13"></a>
<FONT color="green">014</FONT>     *    include the following acknowledgment:<a name="line.14"></a>
<FONT color="green">015</FONT>     * <a name="line.15"></a>
<FONT color="green">016</FONT>     *    "This product includes software developed by IAIK of Graz University of<a name="line.16"></a>
<FONT color="green">017</FONT>     *     Technology."<a name="line.17"></a>
<FONT color="green">018</FONT>     * <a name="line.18"></a>
<FONT color="green">019</FONT>     *    Alternately, this acknowledgment may appear in the software itself, if <a name="line.19"></a>
<FONT color="green">020</FONT>     *    and wherever such third-party acknowledgments normally appear.<a name="line.20"></a>
<FONT color="green">021</FONT>     *  <a name="line.21"></a>
<FONT color="green">022</FONT>     * 4. The names "Graz University of Technology" and "IAIK of Graz University of<a name="line.22"></a>
<FONT color="green">023</FONT>     *    Technology" must not be used to endorse or promote products derived from <a name="line.23"></a>
<FONT color="green">024</FONT>     *    this software without prior written permission.<a name="line.24"></a>
<FONT color="green">025</FONT>     *  <a name="line.25"></a>
<FONT color="green">026</FONT>     * 5. Products derived from this software may not be called <a name="line.26"></a>
<FONT color="green">027</FONT>     *    "IAIK PKCS Wrapper", nor may "IAIK" appear in their name, without prior <a name="line.27"></a>
<FONT color="green">028</FONT>     *    written permission of Graz University of Technology.<a name="line.28"></a>
<FONT color="green">029</FONT>     *  <a name="line.29"></a>
<FONT color="green">030</FONT>     *  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED<a name="line.30"></a>
<FONT color="green">031</FONT>     *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED<a name="line.31"></a>
<FONT color="green">032</FONT>     *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR<a name="line.32"></a>
<FONT color="green">033</FONT>     *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE LICENSOR BE<a name="line.33"></a>
<FONT color="green">034</FONT>     *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,<a name="line.34"></a>
<FONT color="green">035</FONT>     *  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,<a name="line.35"></a>
<FONT color="green">036</FONT>     *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,<a name="line.36"></a>
<FONT color="green">037</FONT>     *  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON<a name="line.37"></a>
<FONT color="green">038</FONT>     *  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,<a name="line.38"></a>
<FONT color="green">039</FONT>     *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY<a name="line.39"></a>
<FONT color="green">040</FONT>     *  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE<a name="line.40"></a>
<FONT color="green">041</FONT>     *  POSSIBILITY  OF SUCH DAMAGE.<a name="line.41"></a>
<FONT color="green">042</FONT>     */<a name="line.42"></a>
<FONT color="green">043</FONT>    <a name="line.43"></a>
<FONT color="green">044</FONT>    package demo.pkcs.pkcs11;<a name="line.44"></a>
<FONT color="green">045</FONT>    <a name="line.45"></a>
<FONT color="green">046</FONT>    import java.security.InvalidKeyException;<a name="line.46"></a>
<FONT color="green">047</FONT>    import java.security.InvalidParameterException;<a name="line.47"></a>
<FONT color="green">048</FONT>    import java.security.MessageDigest;<a name="line.48"></a>
<FONT color="green">049</FONT>    import java.security.NoSuchAlgorithmException;<a name="line.49"></a>
<FONT color="green">050</FONT>    import java.security.Signature;<a name="line.50"></a>
<FONT color="green">051</FONT>    import java.security.SignatureException;<a name="line.51"></a>
<FONT color="green">052</FONT>    <a name="line.52"></a>
<FONT color="green">053</FONT>    import iaik.asn1.structures.AlgorithmID;<a name="line.53"></a>
<FONT color="green">054</FONT>    import iaik.pkcs.pkcs11.Mechanism;<a name="line.54"></a>
<FONT color="green">055</FONT>    import iaik.pkcs.pkcs11.Session;<a name="line.55"></a>
<FONT color="green">056</FONT>    import iaik.pkcs.pkcs11.TokenException;<a name="line.56"></a>
<FONT color="green">057</FONT>    import iaik.pkcs.pkcs11.objects.Key;<a name="line.57"></a>
<FONT color="green">058</FONT>    import iaik.pkcs.pkcs7.DigestInfo;<a name="line.58"></a>
<FONT color="green">059</FONT>    <a name="line.59"></a>
<FONT color="green">060</FONT>    <a name="line.60"></a>
<FONT color="green">061</FONT>    <a name="line.61"></a>
<FONT color="green">062</FONT>    /**<a name="line.62"></a>
<FONT color="green">063</FONT>     * This is an implementation of a JCA Signature class that uses the PKCS#11<a name="line.63"></a>
<FONT color="green">064</FONT>     * wrapper to create the signature. This implementation hashes outside the<a name="line.64"></a>
<FONT color="green">065</FONT>     * token (i.e. in software) and support only signing but not verification.<a name="line.65"></a>
<FONT color="green">066</FONT>     *<a name="line.66"></a>
<FONT color="green">067</FONT>     * @author &lt;a href="mailto:Karl.Scheibelhofer@iaik.at"> Karl Scheibelhofer &lt;/a><a name="line.67"></a>
<FONT color="green">068</FONT>     * @version 0.1<a name="line.68"></a>
<FONT color="green">069</FONT>     * @invariants<a name="line.69"></a>
<FONT color="green">070</FONT>     */<a name="line.70"></a>
<FONT color="green">071</FONT>    public class PKCS11SignatureEngine extends Signature {<a name="line.71"></a>
<FONT color="green">072</FONT>    <a name="line.72"></a>
<FONT color="green">073</FONT>      /**<a name="line.73"></a>
<FONT color="green">074</FONT>       * The session that this object uses for signing with the token.<a name="line.74"></a>
<FONT color="green">075</FONT>       */<a name="line.75"></a>
<FONT color="green">076</FONT>      protected Session session_;<a name="line.76"></a>
<FONT color="green">077</FONT>    <a name="line.77"></a>
<FONT color="green">078</FONT>      /**<a name="line.78"></a>
<FONT color="green">079</FONT>       * The mechanism that this object uses for signing with the token.<a name="line.79"></a>
<FONT color="green">080</FONT>       */<a name="line.80"></a>
<FONT color="green">081</FONT>      protected Mechanism signatureMechanism_;<a name="line.81"></a>
<FONT color="green">082</FONT>    <a name="line.82"></a>
<FONT color="green">083</FONT>      /**<a name="line.83"></a>
<FONT color="green">084</FONT>       * The PKCS#11 key that this object uses for signing with the token.<a name="line.84"></a>
<FONT color="green">085</FONT>       */<a name="line.85"></a>
<FONT color="green">086</FONT>      protected Key signatureKey_;<a name="line.86"></a>
<FONT color="green">087</FONT>    <a name="line.87"></a>
<FONT color="green">088</FONT>      /**<a name="line.88"></a>
<FONT color="green">089</FONT>       * The hash algorithm to use for hashing the data.<a name="line.89"></a>
<FONT color="green">090</FONT>       */<a name="line.90"></a>
<FONT color="green">091</FONT>      protected AlgorithmID hashAlgorithm_;<a name="line.91"></a>
<FONT color="green">092</FONT>    <a name="line.92"></a>
<FONT color="green">093</FONT>      /**<a name="line.93"></a>
<FONT color="green">094</FONT>       * The digest engine used to hash the data.<a name="line.94"></a>
<FONT color="green">095</FONT>       */<a name="line.95"></a>
<FONT color="green">096</FONT>      protected MessageDigest digestEngine_;<a name="line.96"></a>
<FONT color="green">097</FONT>    <a name="line.97"></a>
<FONT color="green">098</FONT>      /**<a name="line.98"></a>
<FONT color="green">099</FONT>       * Creates a new signature engine that uses the given parameters to create<a name="line.99"></a>
<FONT color="green">100</FONT>       * the signature on the PKCS#11 token.<a name="line.100"></a>
<FONT color="green">101</FONT>       *<a name="line.101"></a>
<FONT color="green">102</FONT>       * @param algorithmName The name of the signature algorithm. This class does<a name="line.102"></a>
<FONT color="green">103</FONT>       *                      not interpret this name; it uses it as is.<a name="line.103"></a>
<FONT color="green">104</FONT>       * @param session The PKCS#11 session to use for signing. It must have the<a name="line.104"></a>
<FONT color="green">105</FONT>       *                permissions to sign with the used private key; e.g. it may<a name="line.105"></a>
<FONT color="green">106</FONT>       *                require a user session.<a name="line.106"></a>
<FONT color="green">107</FONT>       * @param signatureMechanism The PKCS#11 mechanism to use for signing; e.g.<a name="line.107"></a>
<FONT color="green">108</FONT>       *                           Mechanism.RSA_PKCS.<a name="line.108"></a>
<FONT color="green">109</FONT>       * @param hashAlgorithm The hash algorithm to use for hashing the data;<a name="line.109"></a>
<FONT color="green">110</FONT>       *                      e.g. AlgorithmID.sha1.<a name="line.110"></a>
<FONT color="green">111</FONT>       * @exception NoSuchAlgorithmException If the hash algorithm is not available.<a name="line.111"></a>
<FONT color="green">112</FONT>       * @preconditions<a name="line.112"></a>
<FONT color="green">113</FONT>       * @postconditions<a name="line.113"></a>
<FONT color="green">114</FONT>       */<a name="line.114"></a>
<FONT color="green">115</FONT>      public PKCS11SignatureEngine(String algorithmName, Session session, Mechanism signatureMechanism,<a name="line.115"></a>
<FONT color="green">116</FONT>                                   AlgorithmID hashAlgorithm)<a name="line.116"></a>
<FONT color="green">117</FONT>          throws NoSuchAlgorithmException<a name="line.117"></a>
<FONT color="green">118</FONT>      {<a name="line.118"></a>
<FONT color="green">119</FONT>        super(algorithmName);<a name="line.119"></a>
<FONT color="green">120</FONT>        session_ = session;<a name="line.120"></a>
<FONT color="green">121</FONT>        signatureMechanism_ = signatureMechanism;<a name="line.121"></a>
<FONT color="green">122</FONT>        hashAlgorithm_ = hashAlgorithm;<a name="line.122"></a>
<FONT color="green">123</FONT>        // we do digesting outside the card, because some cards do not support on-card hashing<a name="line.123"></a>
<FONT color="green">124</FONT>        digestEngine_ = hashAlgorithm_.getMessageDigestInstance();<a name="line.124"></a>
<FONT color="green">125</FONT>      }<a name="line.125"></a>
<FONT color="green">126</FONT>    <a name="line.126"></a>
<FONT color="green">127</FONT>      /**<a name="line.127"></a>
<FONT color="green">128</FONT>       * SPI: see documentation of java.security.Signature.<a name="line.128"></a>
<FONT color="green">129</FONT>       */<a name="line.129"></a>
<FONT color="green">130</FONT>      protected boolean engineVerify(byte[] signatureValue)<a name="line.130"></a>
<FONT color="green">131</FONT>          throws SignatureException<a name="line.131"></a>
<FONT color="green">132</FONT>      {<a name="line.132"></a>
<FONT color="green">133</FONT>        throw new UnsupportedOperationException();<a name="line.133"></a>
<FONT color="green">134</FONT>      }<a name="line.134"></a>
<FONT color="green">135</FONT>    <a name="line.135"></a>
<FONT color="green">136</FONT>      /**<a name="line.136"></a>
<FONT color="green">137</FONT>       * SPI: see documentation of java.security.Signature.<a name="line.137"></a>
<FONT color="green">138</FONT>       */<a name="line.138"></a>
<FONT color="green">139</FONT>      protected java.lang.Object engineGetParameter(String name)<a name="line.139"></a>
<FONT color="green">140</FONT>          throws InvalidParameterException<a name="line.140"></a>
<FONT color="green">141</FONT>      {<a name="line.141"></a>
<FONT color="green">142</FONT>        throw new UnsupportedOperationException();<a name="line.142"></a>
<FONT color="green">143</FONT>      }<a name="line.143"></a>
<FONT color="green">144</FONT>    <a name="line.144"></a>
<FONT color="green">145</FONT>      /**<a name="line.145"></a>
<FONT color="green">146</FONT>       * SPI: see documentation of java.security.Signature.<a name="line.146"></a>
<FONT color="green">147</FONT>       */<a name="line.147"></a>
<FONT color="green">148</FONT>      protected void engineSetParameter(String param, java.lang.Object value)<a name="line.148"></a>
<FONT color="green">149</FONT>          throws InvalidParameterException<a name="line.149"></a>
<FONT color="green">150</FONT>      {<a name="line.150"></a>
<FONT color="green">151</FONT>        throw new UnsupportedOperationException();<a name="line.151"></a>
<FONT color="green">152</FONT>      }<a name="line.152"></a>
<FONT color="green">153</FONT>    <a name="line.153"></a>
<FONT color="green">154</FONT>      /**<a name="line.154"></a>
<FONT color="green">155</FONT>       * SPI: see documentation of java.security.Signature.<a name="line.155"></a>
<FONT color="green">156</FONT>       */<a name="line.156"></a>
<FONT color="green">157</FONT>      protected void engineInitSign(java.security.PrivateKey privateKey)<a name="line.157"></a>
<FONT color="green">158</FONT>          throws InvalidKeyException<a name="line.158"></a>
<FONT color="green">159</FONT>      {<a name="line.159"></a>
<FONT color="green">160</FONT>        if (!(privateKey instanceof TokenPrivateKey)) {<a name="line.160"></a>
<FONT color="green">161</FONT>          throw new InvalidKeyException("Private key must be of instance InvalidKeyException");<a name="line.161"></a>
<FONT color="green">162</FONT>        }<a name="line.162"></a>
<FONT color="green">163</FONT>        signatureKey_ = ((TokenPrivateKey) privateKey).getTokenPrivateKey();<a name="line.163"></a>
<FONT color="green">164</FONT>      }<a name="line.164"></a>
<FONT color="green">165</FONT>    <a name="line.165"></a>
<FONT color="green">166</FONT>      /**<a name="line.166"></a>
<FONT color="green">167</FONT>       * SPI: see documentation of java.security.Signature.<a name="line.167"></a>
<FONT color="green">168</FONT>       */<a name="line.168"></a>
<FONT color="green">169</FONT>      protected byte[] engineSign()<a name="line.169"></a>
<FONT color="green">170</FONT>          throws SignatureException<a name="line.170"></a>
<FONT color="green">171</FONT>      {<a name="line.171"></a>
<FONT color="green">172</FONT>        byte[] hashToBeSigned = digestEngine_.digest();<a name="line.172"></a>
<FONT color="green">173</FONT>    <a name="line.173"></a>
<FONT color="green">174</FONT>        // according to PKCS#11 building the DigestInfo structure must be done off-card<a name="line.174"></a>
<FONT color="green">175</FONT>        DigestInfo digestInfoEngine = new DigestInfo(AlgorithmID.sha1, hashToBeSigned);<a name="line.175"></a>
<FONT color="green">176</FONT>    <a name="line.176"></a>
<FONT color="green">177</FONT>        byte[] toBeEncrypted = digestInfoEngine.toByteArray();<a name="line.177"></a>
<FONT color="green">178</FONT>    <a name="line.178"></a>
<FONT color="green">179</FONT>        byte[] signatureValue = null;<a name="line.179"></a>
<FONT color="green">180</FONT>        try {<a name="line.180"></a>
<FONT color="green">181</FONT>          // initialize for signing<a name="line.181"></a>
<FONT color="green">182</FONT>          session_.signInit(signatureMechanism_, signatureKey_);<a name="line.182"></a>
<FONT color="green">183</FONT>    <a name="line.183"></a>
<FONT color="green">184</FONT>          // sign the data to be signed<a name="line.184"></a>
<FONT color="green">185</FONT>          signatureValue = session_.sign(toBeEncrypted);<a name="line.185"></a>
<FONT color="green">186</FONT>        } catch (TokenException ex) {<a name="line.186"></a>
<FONT color="green">187</FONT>          throw new SignatureException(ex.toString());<a name="line.187"></a>
<FONT color="green">188</FONT>        }<a name="line.188"></a>
<FONT color="green">189</FONT>    <a name="line.189"></a>
<FONT color="green">190</FONT>        return signatureValue ;<a name="line.190"></a>
<FONT color="green">191</FONT>      }<a name="line.191"></a>
<FONT color="green">192</FONT>    <a name="line.192"></a>
<FONT color="green">193</FONT>      /**<a name="line.193"></a>
<FONT color="green">194</FONT>       * SPI: see documentation of java.security.Signature.<a name="line.194"></a>
<FONT color="green">195</FONT>       */<a name="line.195"></a>
<FONT color="green">196</FONT>      protected void engineInitVerify(java.security.PublicKey publicKey)<a name="line.196"></a>
<FONT color="green">197</FONT>          throws InvalidKeyException<a name="line.197"></a>
<FONT color="green">198</FONT>      {<a name="line.198"></a>
<FONT color="green">199</FONT>        throw new UnsupportedOperationException();<a name="line.199"></a>
<FONT color="green">200</FONT>      }<a name="line.200"></a>
<FONT color="green">201</FONT>    <a name="line.201"></a>
<FONT color="green">202</FONT>      /**<a name="line.202"></a>
<FONT color="green">203</FONT>       * SPI: see documentation of java.security.Signature.<a name="line.203"></a>
<FONT color="green">204</FONT>       */<a name="line.204"></a>
<FONT color="green">205</FONT>      protected void engineUpdate(byte dataByte)<a name="line.205"></a>
<FONT color="green">206</FONT>          throws SignatureException<a name="line.206"></a>
<FONT color="green">207</FONT>      {<a name="line.207"></a>
<FONT color="green">208</FONT>        digestEngine_.update(dataByte);<a name="line.208"></a>
<FONT color="green">209</FONT>      }<a name="line.209"></a>
<FONT color="green">210</FONT>    <a name="line.210"></a>
<FONT color="green">211</FONT>      /**<a name="line.211"></a>
<FONT color="green">212</FONT>       * SPI: see documentation of java.security.Signature.<a name="line.212"></a>
<FONT color="green">213</FONT>       */<a name="line.213"></a>
<FONT color="green">214</FONT>      protected void engineUpdate(byte[] data, int offset, int length)<a name="line.214"></a>
<FONT color="green">215</FONT>          throws SignatureException<a name="line.215"></a>
<FONT color="green">216</FONT>      {<a name="line.216"></a>
<FONT color="green">217</FONT>        digestEngine_.update(data, offset, length);<a name="line.217"></a>
<FONT color="green">218</FONT>      }<a name="line.218"></a>
<FONT color="green">219</FONT>    <a name="line.219"></a>
<FONT color="green">220</FONT>    }<a name="line.220"></a>




























































</PRE>
</BODY>
</HTML>
